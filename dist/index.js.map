{"version":3,"sources":["../src/index.ts","../src/app.ts","../src/handlers/auth/index.ts","../src/config/constants.ts","../src/config/email/templates/signup.ts","../src/config/queue.ts","../src/config/email/index.ts","../src/utils/logger.ts","../src/utils/hashPassword.ts","../src/schemas/request/postSignup.ts","../src/schemas/request/postLogin.ts","../src/utils/Error.ts","../src/utils/jwtLib.ts","../src/services/Auth/index.ts","../src/schemas/request/patchUser.ts","../src/services/User/index.ts","../src/services/index.ts","../src/repo/user.ts","../src/repo/index.ts","../src/config/db.ts","../src/handlers/user/index.ts","../src/handlers/user/patchUser.ts","../src/middleware/auth.ts"],"sourcesContent":["import 'dotenv/config'\nimport 'source-map-support/register'\n\nimport http from 'http'\nimport { Server } from 'socket.io'\nimport createApp from './app'\nimport { logger } from './utils'\n\nconst app = createApp()\nconst server = http.createServer(app)\nconst io = new Server(server)\n\nconst PORT = process.env.PORT || 4000\n\nserver.listen(PORT, () => {\n  logger.info('listening on port ' + PORT)\n})\n\nexport { io }\n","import express, { Router } from 'express'\nimport makeAuthRouter from './handlers/auth'\nimport makeServices from './services'\nimport makeRepo from './repo'\nimport db from './config/db'\nimport compression from 'compression'\nimport helmet from 'helmet'\nimport cors from 'cors'\nimport swaggerUi from 'swagger-ui-express'\nimport swaggerDocument from '../docs/swagger.yml'\nimport { handleError } from './utils/Error'\nimport makeUserRouter from './handlers/user'\nimport auth from './middleware/auth'\n\nconst createApp = () => {\n  const repo = makeRepo({ db })\n  const service = makeServices({ repo })\n\n  const app = express()\n  const router = Router()\n\n  app.use(compression())\n  app.use(helmet())\n  app.use(express.json())\n  //TODO: tighten cors\n  app.use(cors())\n  app.use('/reference', swaggerUi.serve, swaggerUi.setup(swaggerDocument))\n  app.get('/', (req, res) => {\n    res.send('welcome to hairsap')\n  })\n  app.use('/auth', makeAuthRouter({ router, service }))\n  app.use('/user', auth(), makeUserRouter({ router, service }))\n  app.use(handleError)\n\n  return app\n}\n\nexport default createApp\n","import type { Router } from 'express'\nimport ah from 'express-async-handler'\nimport type { Role, Service } from '../../types'\n\n//TODO:\n\nconst makeAuthRouter = ({\n  router,\n  service,\n}: {\n  router: Router\n  service: Service\n}) => {\n  router.get(\n    '/',\n    ah((_req, res) => {\n      res.send('Birds home page')\n    }),\n  )\n\n  router.post(\n    '/login',\n    ah(async (req, res) => {\n      const data = await service.auth.login(req.body, req.query.role as Role)\n      res.status(200).send({ data })\n    }),\n  )\n\n  router.post(\n    '/signup',\n    ah(async (req, res) => {\n      const data = await service.auth.signup(req.body, req.query.role as Role)\n      res.status(200).send({ data })\n    }),\n  )\n\n  return router\n}\n\nexport default makeAuthRouter\n","export const DEACTIVATION_REASONS = {\n  WEEKLY: 'Weekly Task Target Default',\n  RATIO: 'Weekly Returned completed booking Ratio default',\n  HOURS: 'Over 48hours redemption payout payment',\n}\n\nexport const ROLES = {\n  USER: 'user',\n  ADMIN: 'admin',\n  PRO: 'pro',\n}\n\nexport const MESSAGE_TYPE = {\n  TEXT: 'text',\n  PHOTO: 'photo',\n}\n\nexport const BOOKING_STATUS = {\n  CANCELLED: 'cancelled',\n  REJECTED: 'rejected',\n  ACCEPTED: 'accepted',\n  COMPLETED: 'completed',\n}\n","export const signUpEmailTemplate = (name: string) => {\n  return {\n    from: '\"Hairsap\" <notify@hairsap.com>',\n    to: 'admin@hairsap.com',\n    subject: 'New SignUp',\n    text: `A new user with name ${name} has signed up`,\n    html: `<p>A new user with name ${name} has signed up</p>`,\n  }\n}\n","import Queue from 'bull'\nimport { sendMail } from './email'\nimport { SendMailOptions } from 'nodemailer'\nimport { logger } from '../utils'\n\nconst mainQueue = new Queue('main', process.env.REDIS_URL as string)\nconst emailQueue = new Queue<SendMailOptions>(\n  'email',\n  process.env.REDIS_URL as string,\n)\nconst paymentThreshold = new Queue(\n  'payment_threshold',\n  process.env.REDIS_URL as string,\n)\n\nmainQueue.process(async (job, done) => {\n  console.log(job.id, job.data)\n  done()\n})\n\nemailQueue.process(async (job, done) => {\n  if (process.env.NODE_ENV !== 'production') return done()\n  sendMail(job.data)\n    .then((_info) => {\n      done()\n    })\n    .catch((error) => {\n      logger.err(error.message)\n      done()\n    })\n})\n\nexport { emailQueue, mainQueue, paymentThreshold }\n","import nodemailer from 'nodemailer'\n\nconst MAIL_PORT = Number(process.env.MAIL_PORT || 0)\n\nconst transporter = nodemailer.createTransport({\n  host: process.env.MAIL_HOST as string,\n  port: MAIL_PORT,\n  secure: process.env.MAIL_SECURE === 'true' || MAIL_PORT === 465,\n  auth: {\n    user: process.env.MAIL_USERNAME,\n    pass: process.env.MAIL_PASSWORD,\n  },\n})\n\nconst sendMail = transporter.sendMail.bind(transporter)\n\nexport { sendMail }\n","import { debug } from 'debug'\nconst i = debug('info')\nconst e = debug('error')\nconst w = debug('warn')\n\nexport enum Formatter {\n  MULTI_LINE_OBJ = '%0',\n  SINGLE_LINE_OBJ = '%o',\n  JSON = '%j',\n  NONE = '%%',\n}\n\nconst info = (obj: unknown, message?: string, formatter?: Formatter): void => {\n  if (message)\n    if (formatter) i(formatter, obj, message)\n    else i('%j', obj, message)\n  else if (formatter) i(formatter, obj)\n  else i('%j', obj)\n}\n\nconst err = (obj: unknown, message?: string, formatter?: Formatter): void => {\n  if (message)\n    if (formatter) e(formatter, obj, message)\n    else e('%o', obj, message)\n  else if (formatter) e(formatter, obj)\n  else e('%o', obj)\n}\n\nconst warn = (obj: unknown, message?: string, formatter?: Formatter): void => {\n  if (message)\n    if (formatter) w(formatter, obj, message)\n    else w('%j', obj, message)\n  else if (formatter) w(formatter, obj)\n  else w('%j', obj)\n}\n\nexport default { info, err, warn }\n","import { createHmac } from 'crypto'\n\nexport enum ALGORITHM_NAMES {\n  SHA1 = 'sha1',\n  SHA256 = 'sha256',\n}\n\nconst hashPassword = (plainTextPassword: string): string => {\n  return createHmac(\n    ALGORITHM_NAMES.SHA256,\n    process.env.DATA_ENCRYPTION_KEY || '',\n  )\n    .update(plainTextPassword)\n    .digest('hex')\n}\n\nexport { hashPassword }\n","import { ROLES } from '../../config/constants'\nimport { z } from 'zod'\n\nexport const PostSignupRequestSchema = z\n  .object({\n    email: z.string().email(),\n    name: z.string(),\n    password: z.string().min(6).max(32),\n    role: z\n      .nativeEnum(ROLES)\n      .refine((role) => role === ROLES.PRO || role === ROLES.USER, {\n        message: 'type must be user or admin',\n      }),\n  })\n  .strict()\n\nexport const PostSignupUserRequestSchema = PostSignupRequestSchema.extend({\n  deviceInfo: z.string().min(1),\n})\n\nexport type PostSignupUserRequest = z.infer<typeof PostSignupUserRequestSchema>\n\nexport const PostSignupProRequestSchema = PostSignupRequestSchema.extend({\n  businessName: z.string(),\n  deviceInfo: z.string().min(1),\n})\n\nexport type PostSignupProRequest = z.infer<typeof PostSignupProRequestSchema>\n","import { z } from 'zod'\nimport { ROLES } from '../../config/constants'\n\nexport const PostLoginRequestSchema = z\n  .object({\n    email: z.string().email(),\n    password: z.string().min(6).max(32),\n    role: z.nativeEnum(ROLES),\n  })\n  .strict()\n\nexport type PostLoginRequest = z.infer<typeof PostLoginRequestSchema>\n\nexport const PostLoginUserRequestSchema = PostLoginRequestSchema.extend({\n  deviceInfo: z.string(),\n})\nexport type PostLoginUserRequest = z.infer<typeof PostLoginUserRequestSchema>\n\nexport const PostLoginProRequestSchema = PostLoginRequestSchema.extend({\n  deviceInfo: z.string(),\n})\nexport type PostLoginProRequest = z.infer<typeof PostLoginProRequestSchema>\n","import { NextFunction, Request, Response } from 'express'\nimport { ZodError } from 'zod'\nimport logger from './logger'\n\nconst ErrorType = {\n  VALIDATION_ERROR: 'Validation Error',\n  INTERNAL_ERROR: 'Internal Error',\n  FORBIDDEN: 'Forbidden',\n  NOT_FOUND: 'Not Found',\n  UNAUTHORIZED: 'Unauthorized',\n} as const\n\nclass HsapError extends Error {\n  status = 500\n  message: string\n  validationError?: any\n\n  constructor(message: string, status: number, validationError?: any) {\n    super(message)\n    this.message = message\n    this.status = status\n    this.validationError = validationError\n  }\n}\n\nclass ValidationError extends HsapError {\n  status = 400\n  message: string\n  validationError: any\n\n  constructor(error: any) {\n    super(\n      typeof error === 'string' ? error : ErrorType.VALIDATION_ERROR,\n      400,\n      error instanceof ZodError\n        ? error.issues\n        : typeof error !== 'string'\n        ? error\n        : undefined,\n    )\n    this.message =\n      typeof error === 'string' ? error : ErrorType.VALIDATION_ERROR\n    this.validationError =\n      error instanceof ZodError\n        ? error.issues\n        : typeof error !== 'string'\n        ? error\n        : undefined\n    this.name = this.constructor.name\n  }\n}\n\nclass InternalError extends HsapError {\n  status = 500\n  message: string\n\n  constructor(message: string = ErrorType.INTERNAL_ERROR) {\n    super(message, 500)\n    this.message = message\n    this.name = this.constructor.name\n  }\n}\n\nclass ForbiddenError extends HsapError {\n  status = 403\n  message: string\n\n  constructor(message: string = ErrorType.FORBIDDEN) {\n    super(message, 403)\n    this.message = message\n    this.name = this.constructor.name\n  }\n}\n\nclass NotFoundError extends HsapError {\n  status = 404\n  message: string\n\n  constructor(message: string = ErrorType.NOT_FOUND) {\n    super(message, 404)\n    this.message = message\n    this.name = this.constructor.name\n  }\n}\n\nclass UnauthorizedError extends HsapError {\n  status = 401\n  message: string\n\n  constructor(message: string = ErrorType.UNAUTHORIZED) {\n    super(message, 401)\n    this.message = message\n    this.name = this.constructor.name\n  }\n}\n\nconst handleError = (\n  _err: HsapError,\n  _req: Request,\n  res: Response,\n  _next: NextFunction,\n) => {\n  let err = _err\n\n  if ((err as any)?.type === 'entity.parse.failed') {\n    err = new HsapError('entity.parse.failed', 413)\n  }\n\n  if (err instanceof InternalError || !(err instanceof HsapError)) {\n    //TODO: send to sentry or email\n    logger.err(err.message, err.stack)\n  }\n\n  if (!(err instanceof HsapError)) {\n    //Don't send error to user\n    err = new InternalError()\n  }\n\n  res\n    .status(err.status)\n    .send({ message: err.message, validationError: err.validationError })\n}\n\nexport {\n  HsapError,\n  ValidationError,\n  NotFoundError,\n  UnauthorizedError,\n  InternalError,\n  ForbiddenError,\n  handleError,\n}\n","import jwt from 'jsonwebtoken'\nimport { ForbiddenError } from './Error'\n\nconst generateJwt = (\n  data: Record<string, unknown>,\n  admin: boolean,\n  expiresIn?: { expiresIn: string },\n): string | undefined => {\n  const secret =\n    (admin ? process.env.JWT_ADMIN_SECRET : process.env.JWT_SECRET) || ''\n  if (!secret || secret === '') return\n  return jwt.sign(data, secret, expiresIn)\n}\n\nconst decodeJwt = (token: string) => {\n  return jwt.decode(token) as Record<string, unknown>\n}\n\nconst verifyJwt = (token: string, admin: boolean) => {\n  const secret =\n    (admin ? process.env.JWT_ADMIN_SECRET : process.env.JWT_SECRET) || ''\n\n  return jwt.verify(token, secret)\n}\n\nexport { generateJwt, decodeJwt, verifyJwt }\n","import { ROLES } from '../../config/constants'\nimport { signUpEmailTemplate } from '../../config/email/templates/signup'\nimport { emailQueue } from '../../config/queue'\nimport {\n  PostSignupProRequest,\n  PostSignupProRequestSchema,\n  PostSignupRequestSchema,\n  PostSignupUserRequest,\n  PostSignupUserRequestSchema,\n} from '../../schemas/request/postSignup'\nimport { hashPassword } from '../../utils'\nimport { ZodError } from 'zod'\nimport {\n  PostLoginProRequest,\n  PostLoginRequest,\n  PostLoginRequestSchema,\n  PostLoginUserRequest,\n} from '../../schemas/request/postLogin'\nimport type { Repo, Role } from '../../types'\nimport {\n  ForbiddenError,\n  InternalError,\n  ValidationError,\n} from '../../utils/Error'\nimport { generateJwt } from '../../utils/jwtLib'\n\nconst login = async ({\n  repo,\n  body,\n  role,\n}: {\n  repo: Repo\n  body: PostLoginProRequest | PostLoginUserRequest | PostLoginRequest\n  role: Role\n}) => {\n  if (!role) throw new ValidationError('Param role not passed')\n\n  const req = PostLoginRequestSchema.parse({ ...body, role })\n\n  const isAdmin = role === ROLES.ADMIN\n\n  let user\n  try {\n    user = await repo.user.getUserByEmail(body.email)\n  } catch (error) {\n    throw new InternalError(error as string)\n  }\n\n  if (!user) throw new ForbiddenError('email or password incorrect')\n  const hashedPassword = hashPassword(body.password)\n\n  if (body.password !== hashedPassword) {\n    throw new ForbiddenError('email or password incorrect')\n  }\n  if (!isAdmin && (user.deactivated || user.terminated)) {\n    throw new ForbiddenError('account inactive, contact support')\n  }\n\n  if (role === ROLES.PRO && !user.verified) {\n    throw new ForbiddenError('user not verified')\n  }\n\n  if (!isAdmin) {\n    //TODO: verify faceId\n    const device = user.devices.find(\n      (device) =>\n        device.value ===\n        (body as PostLoginProRequest | PostLoginUserRequest).deviceInfo,\n    )\n    if (!device) throw new ForbiddenError('device not recognised')\n  }\n\n  const token = generateJwt({ email: req.email, role }, isAdmin, {\n    expiresIn: isAdmin ? String(60 * 60 * 24) : String(60 * 60 * 24 * 7),\n  })\n\n  return {\n    user,\n    token,\n  }\n}\n\nconst signup = async ({\n  repo,\n  body,\n  role,\n}: {\n  repo: Repo\n  body: PostSignupProRequest | PostSignupUserRequest\n  role: Role\n}) => {\n  //TODO: verify faceId\n  if (!role) throw new ValidationError('Param role not passed')\n\n  if (role === ROLES.USER) {\n    PostSignupUserRequestSchema.parse({ ...body, role })\n  } else if (role === ROLES.PRO) {\n    PostSignupProRequestSchema.parse({ ...body, role })\n  } else {\n    PostSignupRequestSchema.parse({ ...body, role })\n  }\n\n  const _user = await repo.user.getUserByEmailandRole(body.email, role)\n  if (_user) throw new ValidationError('User with this email already exists')\n\n  const hashedPassword = hashPassword(body.password)\n\n  const { deviceInfo, ...newBody } = body //eslint-disable-line\n\n  const user = await repo.user.createUser({\n    ...newBody,\n    role: role,\n    password: hashedPassword,\n    devices: {\n      create: {\n        value: body.deviceInfo,\n      },\n    },\n  })\n  const token = generateJwt({ email: user.email, role }, false, {\n    expiresIn: String(60 * 60 * 24 * 7),\n  })\n\n  emailQueue.add(signUpEmailTemplate(user.name))\n  // paymentThreshold.add(\n  //   { email: req.body.email },\n  //   {\n  //     attempts: 3,\n  //     backoff: {\n  //       type: 'exponential',\n  //       delay: 5000,\n  //     },\n  //     delay: 60 * 60 * 24 * 2 * 1000,\n  //     // repeat: {\n  //     //   cron: '',\n  //     //   startDate: new Date(),\n  //     // },\n  //     // timeout\n  //   },\n  // )\n\n  return { user, token }\n}\n\nconst makeAuth = ({ repo }: { repo: Repo }) => {\n  return {\n    login: (body: PostLoginRequest, role: Role) => login({ repo, body, role }),\n    signup: (body: PostSignupProRequest | PostSignupUserRequest, role: Role) =>\n      signup({ repo, body, role }),\n  }\n}\n\nexport default makeAuth\n","import { z } from 'zod'\n\nexport const PatchUserRequestSchema = z.object({\n  userId: z.number(),\n  photoUrl: z.string().min(1),\n})\n\nexport type PatchUserRequest = z.infer<typeof PatchUserRequestSchema>\n\nexport const PatchUserUserRequestSchema = PatchUserRequestSchema.extend({})\nexport type PatchUserUserRequest = z.infer<typeof PatchUserUserRequestSchema>\n\nexport const PatchUserProRequestSchema = PatchUserRequestSchema.extend({\n  closingAt: z.date(),\n  resumptionAt: z.date(),\n})\nexport type PatchUserProRequest = z.infer<typeof PatchUserProRequestSchema>\n","import {\n  PatchUserRequest,\n  PatchUserRequestSchema,\n} from '../../schemas/request/patchUser'\nimport type { Repo } from '../../types'\n\nconst updateUser =\n  ({ repo }: { repo: Repo }) =>\n  async (body: PatchUserRequest) => {\n    PatchUserRequestSchema.parse(body)\n    const { userId, ...newBody } = body\n    await repo.user.updateUser(newBody, userId)\n  }\n\nconst makeUser = ({ repo }: { repo: Repo }) => {\n  return {\n    updateUser: updateUser({ repo }),\n  }\n}\n\nexport default makeUser\n","import type { Repo } from '../types'\nimport makeAuth from './Auth'\nimport makeUser from './User'\n\nconst makeServices = ({ repo }: { repo: Repo }) => {\n  return {\n    auth: makeAuth({ repo }),\n    user: makeUser({ repo }),\n  }\n}\n\nexport default makeServices\n","import { Prisma, PrismaClient } from '@prisma/client'\nimport { Role } from '../types'\n\nconst getUserById =\n  ({ db }: { db: PrismaClient }) =>\n  (userId: number) => {\n    return db.user.findUnique({\n      where: {\n        userId,\n      },\n      include: {\n        devices: true,\n      },\n    })\n  }\n\nconst getUserByEmail = ({ email, db }: { db: PrismaClient; email: string }) => {\n  return db.user.findUnique({\n    where: {\n      email,\n    },\n    include: {\n      devices: true,\n    },\n  })\n}\n\nconst getUserByEmailandRole = async ({\n  email,\n  role,\n  db,\n}: {\n  db: PrismaClient\n  email: string\n  role: Role\n}) => {\n  const user = await db.user.findUnique({\n    where: {\n      email,\n    },\n  })\n\n  return user?.role === role ? user : null\n}\n\nconst createUser = ({\n  user,\n  db,\n}: {\n  db: PrismaClient\n  user: Prisma.UserCreateInput\n}) => db.user.create({ data: user })\n\nconst updateUser =\n  ({ db }: { db: PrismaClient }) =>\n  (user: Prisma.UserUpdateInput, userId: number) => {\n    db.user.update({\n      data: user,\n      where: {\n        userId: userId,\n      },\n    })\n  }\n\nconst makeUserRepo = ({ db }: { db: PrismaClient }) => {\n  return {\n    getUserById: getUserById({ db }),\n    getUserByEmail: (email: string) => getUserByEmail({ db, email }),\n    getUserByEmailandRole: (email: string, role: Role) =>\n      getUserByEmailandRole({ db, email, role }),\n    createUser: (user: Prisma.UserCreateInput) => createUser({ user, db }),\n    updateUser: updateUser({ db }),\n  }\n}\n\nexport default makeUserRepo\n","import makeUserRepo from './user'\n\nconst makeRepo = ({ db }: { db: any }) => {\n  return {\n    user: makeUserRepo({ db }),\n  }\n}\n\nexport default makeRepo\n","import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: ['query'],\n})\n\nexport default prisma\n","import type { Router } from 'express'\nimport ah from 'express-async-handler'\nimport type { Service } from '../../types'\nimport { patchUser } from './patchUser'\n\nconst makeUserRouter = ({\n  router,\n  service,\n}: {\n  router: Router\n  service: Service\n}) => {\n  router.patch('/', ah(patchUser({ service })))\n  return router\n}\n\nexport default makeUserRouter\n","import { Request, Response } from 'express'\nimport { Service } from '../../types'\n\nexport const patchUser =\n  ({ service }: { service: Service }) =>\n  async (req: Request, res: Response) => {\n    await service.user.updateUser(req.body)\n    res.sendStatus(201)\n  }\n","import { NextFunction, Request, Response } from 'express'\nimport { ForbiddenError, UnauthorizedError } from '../utils/Error'\nimport { decodeJwt, verifyJwt } from '../utils/jwtLib'\n\nconst auth = () => (req: Request, res: Response, next: NextFunction) => {\n  let token = req.headers.authorization\n  if (!token) throw new UnauthorizedError()\n  token = token.replace(/Bearer /g, '')\n  const decodedToken = decodeJwt(token)\n  try {\n    verifyJwt(token, decodedToken?.admin as boolean)\n  } catch (error) {\n    throw new ForbiddenError()\n  }\n\n  res.locals.tokenData = decodedToken\n  next()\n}\n\nexport default auth\n"],"mappings":"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","names":["ah","nodemailer","Queue","import_zod","import_zod","err","jwt","device","import_zod","updateUser","import_express_async_handler","ah","user_default","auth_default","app","express","compression","helmet","cors","swaggerUi","auth_default","user_default","http"]}