{"version":3,"sources":["../src/index.ts","../src/app.ts","../src/config/queue.ts","../src/config/email.ts","../src/utils/logger.ts","../src/handlers/auth/index.ts","../src/schemas/request/postLogin.ts","../src/utils/Error.ts","../src/utils/generateJwt.ts","../src/services/Auth/index.ts","../src/services/index.ts","../src/repo/user.ts","../src/repo/index.ts","../src/config/db.ts"],"sourcesContent":["import 'dotenv/config'\nimport 'source-map-support/register'\n\nimport http from 'http'\nimport { Server } from 'socket.io'\nimport createApp from './app'\nimport { logger } from './utils'\n\nconst app = createApp()\nconst server = http.createServer(app)\nconst io = new Server(server)\n\nio.on('connection', (socket) => {\n  console.log('a user connected')\n  socket.on('disconnect', () => {\n    console.log('user disconnected')\n  })\n})\n\nconst PORT = process.env.PORT || 4000\n\nserver.listen(PORT, () => {\n  logger.info('listening on port ' + PORT)\n})\n","import express, { Router } from 'express'\nimport makeAuthRouter from './handlers/auth'\nimport makeServices from './services'\nimport makeRepo from './repo'\nimport db from './config/db'\nimport compression from 'compression'\nimport helmet from 'helmet'\nimport cors from 'cors'\nimport swaggerUi from 'swagger-ui-express'\nimport swaggerDocument from '../docs/swagger.yml'\nimport { handleError } from './utils/Error'\n\nconst createApp = () => {\n  const repo = makeRepo({ db })\n  const service = makeServices({ repo })\n\n  const app = express()\n  const router = Router()\n\n  app.use(compression())\n  app.use(helmet())\n  app.use(express.json())\n  //TODO: tighten cors\n  app.use(cors())\n  app.use('/reference', swaggerUi.serve, swaggerUi.setup(swaggerDocument))\n  app.get('/', (req, res) => {\n    res.send('welcome to hairsap')\n  })\n  app.use('/auth', makeAuthRouter({ router, service }))\n  app.use(handleError)\n\n  return app\n}\n\nexport default createApp\n","import Queue from 'bull'\nimport { sendMail } from './email'\nimport { SendMailOptions } from 'nodemailer'\nimport { logger } from '../utils'\n\nconst mainQueue = new Queue('main', process.env.REDIS_URL as string)\nconst emailQueue = new Queue<SendMailOptions>(\n  'email',\n  process.env.REDIS_URL as string,\n)\nconst paymentThreshold = new Queue(\n  'payment_threshold',\n  process.env.REDIS_URL as string,\n)\n\nmainQueue.process(async (job, done) => {\n  console.log(job.id, job.data)\n  done()\n})\n\nemailQueue.process(async (job, done) => {\n  sendMail(job.data)\n    .then((_info) => {\n      done()\n    })\n    .catch((error) => {\n      logger.err(error.message)\n      done()\n    })\n})\n\nexport { emailQueue, mainQueue, paymentThreshold }\n","import nodemailer from 'nodemailer'\n\nconst MAIL_PORT = Number(process.env.MAIL_PORT || 0)\n\nconst transporter = nodemailer.createTransport({\n  host: process.env.MAIL_HOST as string,\n  port: MAIL_PORT,\n  secure: process.env.MAIL_SECURE === 'true' || MAIL_PORT === 465,\n  auth: {\n    user: process.env.MAIL_USERNAME,\n    pass: process.env.MAIL_PASSWORD,\n  },\n})\n\nconst sendMail = transporter.sendMail.bind(transporter)\n\nexport { sendMail }\n","import { debug } from 'debug'\nconst i = debug('info')\nconst e = debug('error')\nconst w = debug('warn')\n\nexport enum Formatter {\n  MULTI_LINE_OBJ = '%0',\n  SINGLE_LINE_OBJ = '%o',\n  JSON = '%j',\n  NONE = '%%',\n}\n\nconst info = (obj: unknown, message?: string, formatter?: Formatter): void => {\n  if (message)\n    if (formatter) i(formatter, obj, message)\n    else i('%j', obj, message)\n  else if (formatter) i(formatter, obj)\n  else i('%j', obj)\n}\n\nconst err = (obj: unknown, message?: string, formatter?: Formatter): void => {\n  if (message)\n    if (formatter) e(formatter, obj, message)\n    else e('%o', obj, message)\n  else if (formatter) e(formatter, obj)\n  else e('%o', obj)\n}\n\nconst warn = (obj: unknown, message?: string, formatter?: Formatter): void => {\n  if (message)\n    if (formatter) w(formatter, obj, message)\n    else w('%j', obj, message)\n  else if (formatter) w(formatter, obj)\n  else w('%j', obj)\n}\n\nexport default { info, err, warn }\n","import { emailQueue, mainQueue, paymentThreshold } from '../../config/queue'\nimport type { Router } from 'express'\nimport ah from 'express-async-handler'\nimport type { Service } from '../../types'\n\nconst makeAuthRouter = ({\n  router,\n  service,\n}: {\n  router: Router\n  service: Service\n}) => {\n  router.get(\n    '/',\n    ah((_req, res) => {\n      res.send('Birds home page')\n    }),\n  )\n\n  router.post(\n    '/login',\n    ah(async (req, res) => {\n      const data = await service.auth.login(req.body)\n      emailQueue.add({\n        from: '\"Hairsap üë•\" <notify@hairsap.com>', // sender address\n        to: 'jideadedejifirst@gmail.com', // list of receivers\n        subject: 'Hello ‚úî', // Subject line\n        text: 'Hello world üê¥', // plaintext body\n        html: '<b>Hello world üê¥</b>', // html body\n      })\n      // mainQueue.add({ email: req.body.email })\n      // paymentThreshold.add(\n      //   { email: req.body.email },\n      //   {\n      //     attempts: 3,\n      //     backoff: {\n      //       type: 'exponential',\n      //       delay: 5000,\n      //     },\n      //     delay: 60 * 60 * 24 * 2 * 1000,\n      //     // repeat: {\n      //     //   cron: '',\n      //     //   startDate: new Date(),\n      //     // },\n      //     // timeout\n      //   },\n      // )\n      res.status(200).send({ data })\n    }),\n  )\n\n  return router\n}\n\nexport default makeAuthRouter\n","import { z } from 'zod'\n\nconst PostLoginRequestSchema = z\n  .object({\n    email: z.string().email(),\n    password: z.string().min(6).max(32),\n  })\n  .strict()\n\nexport type PostLoginRequest = z.infer<typeof PostLoginRequestSchema>\n\nexport { PostLoginRequestSchema }\n","import { NextFunction, Request, Response } from 'express'\nimport logger from './logger'\n\nconst ErrorType = {\n  VALIDATION_ERROR: 'Validation Error',\n  INTERNAL_ERROR: 'Internal Error',\n  FORBIDDEN: 'Forbidden',\n  NOT_FOUND: 'Not Found',\n  UNAUTHORIZED: 'Unauthorized',\n} as const\n\nclass HsapError extends Error {\n  status = 500\n  message: string\n  validationError?: any\n\n  constructor(message: string, status: number, validationError?: any) {\n    super(message)\n    this.message = message\n    this.status = status\n    this.validationError = validationError\n  }\n}\n\nclass ValidationError extends HsapError {\n  status = 400\n  message: string\n  validationError: any\n\n  constructor(error: any) {\n    super(\n      typeof error === 'string' ? error : ErrorType.VALIDATION_ERROR,\n      400,\n      typeof error !== 'string' ? error : undefined,\n    )\n    this.message =\n      typeof error === 'string' ? error : ErrorType.VALIDATION_ERROR\n    this.validationError = typeof error !== 'string' ? error : undefined\n  }\n}\n\nclass InternalError extends HsapError {\n  status = 500\n  message: string\n\n  constructor(message: string = ErrorType.INTERNAL_ERROR) {\n    super(message, 500)\n    this.message = message\n  }\n}\n\nclass ForbiddenError extends HsapError {\n  status = 403\n  message: string\n\n  constructor(message: string = ErrorType.FORBIDDEN) {\n    super(message, 403)\n    this.message = message\n  }\n}\n\nclass NotFoundError extends HsapError {\n  status = 404\n  message: string\n\n  constructor(message: string = ErrorType.NOT_FOUND) {\n    super(message, 404)\n    this.message = message\n  }\n}\n\nclass UnauthorizedError extends HsapError {\n  status = 401\n  message: string\n\n  constructor(message: string = ErrorType.UNAUTHORIZED) {\n    super(message, 401)\n    this.message = message\n  }\n}\n\nconst handleError = (\n  _err: HsapError,\n  _req: Request,\n  res: Response,\n  _next: NextFunction,\n) => {\n  let err = _err\n  if (err instanceof InternalError || !(err instanceof HsapError)) {\n    //TODO: send to sentry or email\n    logger.err(err.message)\n  }\n\n  if (!(err instanceof HsapError)) {\n    err = new InternalError((err as Error).message)\n  }\n\n  res.status(err.status).send(err.message)\n}\n\nexport {\n  HsapError,\n  ValidationError,\n  NotFoundError,\n  UnauthorizedError,\n  InternalError,\n  ForbiddenError,\n  handleError,\n}\n","import jwt from 'jsonwebtoken'\n\nconst generateJwt = (\n  data: Record<string, unknown>,\n  expiresIn?: { expiresIn: string },\n): string | undefined => {\n  const jwtSecret = process.env.JWT_SECRET || ''\n  if (!jwtSecret || jwtSecret === '') return\n  return jwt.sign(data, jwtSecret, expiresIn)\n}\n\nconst generateAdminJwt = (\n  data: Record<string, unknown>,\n  expiresIn?: { expiresIn: string },\n): string | undefined => {\n  const jwtSecret = process.env.JWT_ADMIN_SECRET || ''\n  if (!jwtSecret || jwtSecret === '') return\n  return jwt.sign(data, jwtSecret, expiresIn)\n}\n\nexport { generateJwt, generateAdminJwt }\n","import { ZodError } from 'zod'\nimport { PostLoginRequestSchema } from '../../schemas/request/postLogin'\nimport type { Repo } from '../../types'\nimport {\n  InternalError,\n  NotFoundError,\n  ValidationError,\n} from '../../utils/Error'\nimport { generateJwt } from '../../utils/generateJwt'\n\nconst login = ({ repo, body }: { repo: Repo; body: unknown }) => {\n  let req\n  try {\n    req = PostLoginRequestSchema.parse(body)\n  } catch (error) {\n    throw new ValidationError((error as ZodError).issues)\n  }\n  try {\n    const user = repo.user.getUser(req.email)\n    if (!user) throw new NotFoundError('user not found')\n  } catch (error) {\n    throw new InternalError()\n  }\n  return { token: generateJwt({ email: req.email }) }\n}\n\nconst makeAuth = ({ repo }: { repo: Repo }) => {\n  return {\n    login: (body: unknown) => login({ repo, body }),\n  }\n}\n\nexport default makeAuth\n","import type { Repo } from '../types'\nimport makeAuth from './Auth'\n\nconst makeServices = ({ repo }: { repo: Repo }) => {\n  return {\n    auth: makeAuth({ repo }),\n  }\n}\n\nexport default makeServices\n","const getUser = ({ db }: { db: any }) => {\n  db\n  return {\n    email: 'jideadedejifirst@gmail.com',\n  }\n}\n\nconst makeUserRepo = ({ db }: { db: any }) => {\n  return { getUser: (email: string) => getUser({ db }) }\n}\n\nexport default makeUserRepo\n","import makeUserRepo from './user'\n\nconst makeRepo = ({ db }: { db: any }) => {\n  return {\n    user: makeUserRepo({ db }),\n  }\n}\n\nexport default makeRepo\n","export default {}\n"],"mappings":"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","names":["nodemailer","Queue","ah","err","jwt","app","express","compression","helmet","cors","swaggerUi","http"]}