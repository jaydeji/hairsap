{"version":3,"sources":["../src/index.ts","../src/app.ts","../src/config/db.ts","../src/utils/Error.ts","../src/utils/logger.ts","../src/utils/jwtLib.ts","../src/middleware/auth.ts","../src/config/constants.ts","../src/config/email/templates/signup.ts","../src/config/queue.ts","../src/config/email/index.ts","../src/utils/hashPassword.ts","../src/utils/validators.ts","../src/schemas/request/postSignup.ts","../src/schemas/request/postLogin.ts","../src/schemas/response/postLogin.ts","../src/schemas/request/postValidateOtp.ts","../src/utils/otp.ts","../src/utils/dayjs.ts","../src/services/Auth/index.ts","../src/schemas/request/getChatById.ts","../src/schemas/models/Cursor.ts","../src/services/Chat/index.ts","../src/schemas/request/patchUser.ts","../src/services/User/index.ts","../src/services/index.ts","../src/repo/chat.ts","../src/repo/user.ts","../src/repo/index.ts","../src/handlers/auth/index.ts","../src/handlers/user/index.ts","../src/config/multer-cloud.ts","../src/handlers/user/patchUser.ts","../src/handlers/chat/index.ts","../src/handlers/index.ts","../src/handlers/chat/socket.ts"],"sourcesContent":["import 'dotenv/config'\nimport 'source-map-support/register'\nimport http from 'http'\n\nimport createApp from './app'\nimport { logger } from './utils'\nimport createChat from './handlers/chat/socket'\nimport { Server } from 'socket.io'\n\nconst app = createApp()\nconst server = http.createServer(app)\nconst io = new Server(server, {\n  // pingTimeout: 60000,\n  cors: {\n    origin: '*',\n  },\n})\n\ncreateChat({ io })\n\nconst PORT = process.env.PORT || 4000\n\nserver.listen(PORT, () => {\n  logger.info('listening on port ' + PORT)\n})\n\nexport type IO = typeof io\n","import express, { Router } from 'express'\nimport compression from 'compression'\nimport helmet from 'helmet'\nimport cors from 'cors'\n\nimport db from './config/db'\nimport auth from './middleware/auth'\nimport { handleError } from './utils/Error'\nimport swaggerUi from 'swagger-ui-express'\nimport swaggerDocument from '../docs/swagger.yml'\n\nimport makeServices from './services'\nimport makeRepo from './repo'\n\nimport makeAuthRouter from './handlers/auth'\nimport makeUserRouter from './handlers/user'\nimport makeChatRouter from './handlers/chat'\nimport makeRouter from './handlers'\n\nconst createApp = () => {\n  const repo = makeRepo({ db })\n  const service = makeServices({ repo })\n\n  const app = express()\n  const router = Router()\n\n  app.use(compression())\n  app.use(helmet())\n  app.use(express.json())\n  //TODO: tighten cors\n  app.use(cors())\n  app.use('/reference', swaggerUi.serve, swaggerUi.setup(swaggerDocument))\n  app.use('/auth', makeAuthRouter({ router, service }))\n  app.use('/users', auth(), makeUserRouter({ router, service }))\n  app.use('/chats', auth(), makeChatRouter({ router, service }))\n  app.use('/', makeRouter({ router, service }))\n\n  app.use(handleError)\n\n  return app\n}\n\nexport default createApp\n","import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: ['query'],\n})\n\nexport default prisma\n","import { NextFunction, Request, Response } from 'express'\nimport { ZodError } from 'zod'\nimport logger from './logger'\nimport { MulterError } from 'multer'\n\nconst ErrorType = {\n  VALIDATION_ERROR: 'Validation Error',\n  INTERNAL_ERROR: 'Internal Error',\n  FORBIDDEN: 'Forbidden',\n  NOT_FOUND: 'Not Found',\n  UNAUTHORIZED: 'Unauthorized',\n} as const\n\nclass HsapError extends Error {\n  status = 500\n  message: string\n  validationError?: any\n\n  constructor(message: string, status: number, validationError?: any) {\n    super(message)\n    this.message = message\n    this.status = status\n    this.validationError = validationError\n  }\n}\n\nclass ValidationError extends HsapError {\n  status = 400\n  message: string\n  validationError: any\n\n  constructor(error: any) {\n    super(\n      typeof error === 'string' ? error : ErrorType.VALIDATION_ERROR,\n      400,\n      typeof error !== 'string' ? error : undefined,\n    )\n    this.message =\n      typeof error === 'string' ? error : ErrorType.VALIDATION_ERROR\n    this.validationError = typeof error !== 'string' ? error : undefined\n    this.name = this.constructor.name\n  }\n}\n\nclass InternalError extends HsapError {\n  status = 500\n  message: string\n\n  constructor(message: string = ErrorType.INTERNAL_ERROR) {\n    super(message, 500)\n    this.message = message\n    this.name = this.constructor.name\n  }\n}\n\nclass ForbiddenError extends HsapError {\n  status = 403\n  message: string\n\n  constructor(message: string = ErrorType.FORBIDDEN) {\n    super(message, 403)\n    this.message = message\n    this.name = this.constructor.name\n  }\n}\n\nclass NotFoundError extends HsapError {\n  status = 404\n  message: string\n\n  constructor(message: string = ErrorType.NOT_FOUND) {\n    super(message, 404)\n    this.message = message\n    this.name = this.constructor.name\n  }\n}\n\nclass UnauthorizedError extends HsapError {\n  status = 401\n  message: string\n\n  constructor(message: string = ErrorType.UNAUTHORIZED) {\n    super(message, 401)\n    this.message = message\n    this.name = this.constructor.name\n  }\n}\n\nconst handleError = (\n  _err: HsapError,\n  _req: Request,\n  res: Response,\n  _next: NextFunction,\n) => {\n  let err = _err\n\n  if ((err as any)?.type === 'entity.parse.failed') {\n    err = new HsapError('entity.parse.failed', 413)\n  }\n\n  if (err instanceof ZodError) {\n    err = new ValidationError(err.issues)\n  }\n\n  if (err instanceof MulterError) {\n    err = new ValidationError(err.message)\n  }\n\n  if (err instanceof InternalError || !(err instanceof HsapError)) {\n    //TODO: send to sentry or email\n    logger.err(err.message, err.stack)\n  }\n\n  if (!(err instanceof HsapError)) {\n    //Don't send error to user\n    err = new InternalError()\n  }\n\n  res\n    .status(err.status)\n    .send({ message: err.message, validationError: err.validationError })\n}\n\nexport {\n  HsapError,\n  ValidationError,\n  NotFoundError,\n  UnauthorizedError,\n  InternalError,\n  ForbiddenError,\n  handleError,\n}\n","import { debug } from 'debug'\nconst i = debug('info')\nconst e = debug('error')\nconst w = debug('warn')\n\nexport enum Formatter {\n  MULTI_LINE_OBJ = '%0',\n  SINGLE_LINE_OBJ = '%o',\n  JSON = '%j',\n  NONE = '%%',\n}\n\nconst info = (obj: unknown, message?: string, formatter?: Formatter): void => {\n  if (message)\n    if (formatter) i(formatter, obj, message)\n    else i('%j', obj, message)\n  else if (formatter) i(formatter, obj)\n  else i('%j', obj)\n}\n\nconst err = (obj: unknown, message?: string, formatter?: Formatter): void => {\n  if (message)\n    if (formatter) e(formatter, obj, message)\n    else e('%o', obj, message)\n  else if (formatter) e(formatter, obj)\n  else e('%o', obj)\n}\n\nconst warn = (obj: unknown, message?: string, formatter?: Formatter): void => {\n  if (message)\n    if (formatter) w(formatter, obj, message)\n    else w('%j', obj, message)\n  else if (formatter) w(formatter, obj)\n  else w('%j', obj)\n}\n\nexport default { info, err, warn }\n","import { Request } from 'express'\nimport jwt from 'jsonwebtoken'\nimport { ForbiddenError } from './Error'\n\nconst generateJwt = (\n  data: Record<string, unknown>,\n  admin: boolean,\n  expiresIn?: { expiresIn: string },\n): string | undefined => {\n  const secret =\n    (admin ? process.env.JWT_ADMIN_SECRET : process.env.JWT_SECRET) || ''\n  if (!secret || secret === '') return\n  return jwt.sign(data, secret, expiresIn)\n}\n\nconst decodeJwt = (token: string) => {\n  return jwt.decode(token) as Request['tokenData']\n}\n\nconst verifyJwt = (token: string, isAdmin: boolean) => {\n  const secret =\n    (isAdmin ? process.env.JWT_ADMIN_SECRET : process.env.JWT_SECRET) || ''\n\n  return jwt.verify(token, secret)\n}\n\nexport { generateJwt, decodeJwt, verifyJwt }\n","import { NextFunction, Request, Response } from 'express'\nimport { UnauthorizedError } from '../utils/Error'\nimport { decodeJwt, verifyJwt } from '../utils/jwtLib'\nimport ah from 'express-async-handler'\nimport { ROLES } from '../config/constants'\n\nconst auth = () =>\n  ah((req: Request, res: Response, next: NextFunction) => {\n    let token = req.headers.authorization\n    if (!token) throw new UnauthorizedError()\n    token = token.replace(/Bearer /g, '')\n    const decodedToken = decodeJwt(token)\n    try {\n      verifyJwt(token, decodedToken?.role === ROLES.ADMIN)\n    } catch (error) {\n      throw new UnauthorizedError()\n    }\n\n    req.tokenData = decodedToken\n    next()\n  })\n\nexport default auth\n","export const DEACTIVATION_REASONS = {\n  WEEKLY: 'Weekly Task Target Default',\n  RATIO: 'Weekly Returned completed booking Ratio default',\n  HOURS: 'Over 48hours redemption payout payment',\n} as const\n\nexport const ROLES = {\n  USER: 'user',\n  ADMIN: 'admin',\n  PRO: 'pro',\n} as const\n\nexport const MESSAGE_TYPE = {\n  TEXT: 'text',\n  PHOTO: 'photo',\n} as const\n\nexport const BOOKING_STATUS = {\n  CANCELLED: 'cancelled',\n  REJECTED: 'rejected',\n  ACCEPTED: 'accepted',\n  COMPLETED: 'completed',\n} as const\n\nexport const OTP_TYPE = {\n  EMAIL: 'email',\n  PHONE: 'phone',\n} as const\n\nexport const BUCKET = {\n  PHOTO: 'photo',\n  VIDEO: 'video',\n} as const\n\nexport const PLACEHOLDER =\n  'https://avatars.dicebear.com/api/adventurer/hairsap.svg'\n","export const signUpEmailTemplate = (name: string) => {\n  return {\n    from: '\"Hairsap\" <notify@hairsap.com>',\n    to: 'admin@hairsap.com',\n    subject: 'New SignUp',\n    text: `A new user with name ${name} has signed up`,\n    html: `<p>A new user with name ${name} has signed up</p>`,\n  }\n}\nexport const otpEmailTemplate = ({\n  email,\n  name,\n  otp,\n}: {\n  email: string\n  name: string\n  otp: string\n}) => {\n  return {\n    from: '\"Hairsap\" <notify@hairsap.com>',\n    to: email,\n    subject: 'Your OTP Code',\n    text: `Dear ${name},\\n Please use the OTP code: ${otp} to complete your login.`,\n    html: `<p>Dear ${name},\\n Please use the OTP code: ${otp} to complete your login.</p>`,\n  }\n}\n","import Queue from 'bull'\nimport { sendMail } from './email'\nimport { SendMailOptions } from 'nodemailer'\nimport { logger } from '../utils'\nimport db from '../config/db'\nimport { ChatMessageType } from '../handlers/chat/socket'\n\nconst redisUrl = process.env.REDIS_URL as string\n\nconst mainQueue = new Queue('main', redisUrl)\nconst emailQueue = new Queue<SendMailOptions>('email', redisUrl)\nconst phoneQueue = new Queue('phone', redisUrl)\nconst paymentQueue = new Queue('payment', redisUrl)\nconst chatQueue = new Queue<ChatMessageType>('chat', redisUrl)\nconst paymentThreshold = new Queue('payment_threshold', redisUrl)\n\nmainQueue.process(async (job, done) => {\n  logger.info(job.id, job.data)\n  done()\n})\n\nemailQueue.process(async (job, done) => {\n  if (process.env.NODE_ENV !== 'production') return done()\n  sendMail(job.data)\n    .then((_info) => {\n      done()\n    })\n    .catch((error) => {\n      logger.err(error.message)\n      done()\n    })\n})\n\nphoneQueue.process(async (job, done) => {\n  if (process.env.NODE_ENV !== 'production') return done()\n  //  TODO: send test message\n})\n\nchatQueue.process(async (job, done) => {\n  if (process.env.NODE_ENV !== 'production') return done()\n  await db.chat.create({\n    data: job.data,\n  })\n})\n\npaymentQueue.process(async (job, done) => {\n  await db.paymentEvents.create(job.data)\n  if (job.data?.event === 'paymentrequest.success') {\n    //TODO: mark payment as confirmed\n  }\n  done()\n})\n\nexport {\n  emailQueue,\n  mainQueue,\n  paymentThreshold,\n  phoneQueue,\n  paymentQueue,\n  chatQueue,\n}\n","import nodemailer from 'nodemailer'\n\nconst MAIL_PORT = Number(process.env.MAIL_PORT || 0)\n\nconst transporter = nodemailer.createTransport({\n  host: process.env.MAIL_HOST as string,\n  port: MAIL_PORT,\n  secure: process.env.MAIL_SECURE === 'true' || MAIL_PORT === 465,\n  auth: {\n    user: process.env.MAIL_USERNAME,\n    pass: process.env.MAIL_PASSWORD,\n  },\n})\n\nconst sendMail = transporter.sendMail.bind(transporter)\n\nexport { sendMail }\n","import { createHmac } from 'crypto'\n\nexport enum ALGORITHM_NAMES {\n  SHA1 = 'sha1',\n  SHA256 = 'sha256',\n}\n\nconst hashPassword = (plainTextPassword: string): string => {\n  return createHmac(\n    ALGORITHM_NAMES.SHA256,\n    process.env.DATA_ENCRYPTION_KEY || '',\n  )\n    .update(plainTextPassword)\n    .digest('hex')\n}\n\nexport { hashPassword }\n","export const isNumericString = (value: unknown) =>\n  !!(value as string).match(/^\\d+$/)\n\nexport const makeStringNumeric = (value: unknown) =>\n  isNumericString(value) ? +(value as number) : value\n","import { ROLES } from '../../config/constants'\nimport { z } from 'zod'\n\nexport const PostSignupRequestSchema = z\n  .object({\n    email: z.string().email(),\n    name: z.string(),\n    password: z.string().min(6).max(32),\n    role: z\n      .nativeEnum(ROLES)\n      .refine((role) => role === ROLES.PRO || role === ROLES.USER, {\n        message: 'type must be user or admin',\n      }),\n  })\n  .strict()\n\nexport const PostSignupUserRequestSchema = PostSignupRequestSchema.extend({\n  deviceInfo: z.string().min(1),\n  phone: z.string().min(8),\n}).strict()\n\nexport type PostSignupUserRequest = z.infer<typeof PostSignupUserRequestSchema>\n\nexport const PostSignupProRequestSchema = PostSignupRequestSchema.extend({\n  businessName: z.string(),\n  deviceInfo: z.string().min(1),\n  phone: z.string().min(8),\n}).strict()\n\nexport type PostSignupProRequest = z.infer<typeof PostSignupProRequestSchema>\n","import { z } from 'zod'\nimport { OTP_TYPE, ROLES } from '../../config/constants'\n\nexport const PostLoginRequestSchema = z\n  .object({\n    email: z.string().email(),\n    password: z.string().min(6).max(32),\n    role: z.nativeEnum(ROLES),\n    otpType: z.nativeEnum(OTP_TYPE),\n  })\n  .strict()\n\nexport type PostLoginRequest = z.infer<typeof PostLoginRequestSchema>\n\nexport const PostLoginUserRequestSchema = PostLoginRequestSchema.extend({\n  deviceInfo: z.string(),\n}).strict()\nexport type PostLoginUserRequest = z.infer<typeof PostLoginUserRequestSchema>\n\nexport const PostLoginProRequestSchema = PostLoginRequestSchema.extend({\n  deviceInfo: z.string(),\n}).strict()\nexport type PostLoginProRequest = z.infer<typeof PostLoginProRequestSchema>\n","import { z } from 'zod'\nimport { ROLES } from '../../config/constants'\n\nconst PostLoginResponseSchema = z\n  .object({\n    address: z.string().optional().nullable(),\n    email: z.string().email(),\n    name: z.string(),\n    photoUrl: z.string().optional().nullable(),\n    role: z.nativeEnum(ROLES),\n    userId: z.number(),\n  })\n  .passthrough()\n  .strict()\n  .strip()\n\nexport type PostLoginResponse = z.infer<typeof PostLoginResponseSchema>\n\nexport { PostLoginResponseSchema }\n","import { z } from 'zod'\n\nexport const PostValidateOtpReqSchema = z\n  .object({\n    userId: z.number().min(1),\n    otp: z.string().min(6),\n  })\n  .strict()\n\nexport type PostValidateOtpReq = z.infer<typeof PostValidateOtpReqSchema>\n","import crypto from 'crypto'\n\nconst generateLoginOtp = (size = 6): Promise<string> =>\n  new Promise((res) =>\n    crypto.randomBytes(3, (err, buffer) => {\n      const otp = parseInt(buffer.toString('hex'), 16)\n        .toString()\n        .substring(0, size)\n      res(String(otp))\n    }),\n  )\n\nexport { generateLoginOtp }\n","import dayjs from 'dayjs'\nimport duration from 'dayjs/plugin/duration'\ndayjs.extend(duration)\n\nexport default dayjs\n","import { OTP_TYPE, ROLES } from '../../config/constants'\nimport {\n  otpEmailTemplate,\n  signUpEmailTemplate,\n} from '../../config/email/templates/signup'\nimport { emailQueue, phoneQueue } from '../../config/queue'\nimport {\n  PostSignupProRequest,\n  PostSignupProRequestSchema,\n  PostSignupRequestSchema,\n  PostSignupUserRequest,\n  PostSignupUserRequestSchema,\n} from '../../schemas/request/postSignup'\nimport { hashPassword, logger } from '../../utils'\nimport {\n  PostLoginProRequest,\n  PostLoginProRequestSchema,\n  PostLoginRequest,\n  PostLoginRequestSchema,\n  PostLoginUserRequest,\n  PostLoginUserRequestSchema,\n} from '../../schemas/request/postLogin'\nimport type { OtpType, Repo, Role } from '../../types'\nimport {\n  ForbiddenError,\n  InternalError,\n  ValidationError,\n} from '../../utils/Error'\nimport { generateJwt } from '../../utils/jwtLib'\nimport { PostLoginResponseSchema } from '../../schemas/response/postLogin'\nimport {\n  PostValidateOtpReq,\n  PostValidateOtpReqSchema,\n} from '../../schemas/request/postValidateOtp'\nimport { generateLoginOtp } from '../../utils/otp'\nimport dayjs from '../../utils/dayjs'\nimport { upload } from '../../config/multer-cloud'\n\nconst login = async ({\n  repo,\n  body,\n  role,\n}: {\n  repo: Repo\n  body: PostLoginProRequest | PostLoginUserRequest | PostLoginRequest\n  role: Role\n}) => {\n  if (!role) throw new ValidationError('Param role not passed')\n\n  const isAdmin = role === ROLES.ADMIN\n\n  if (!isAdmin && role === ROLES.USER)\n    PostLoginUserRequestSchema.parse({ ...body, role })\n  else if (!isAdmin && role === ROLES.PRO)\n    PostLoginProRequestSchema.parse({ ...body, role })\n  else PostLoginRequestSchema.parse({ ...body, role })\n\n  let user\n  try {\n    user = await repo.user.getUserByEmail(body.email)\n  } catch (error) {\n    throw new InternalError(error as string)\n  }\n  if (!user) throw new ForbiddenError('email or password incorrect')\n  const hashedPassword = hashPassword(body.password)\n\n  if (user.password !== hashedPassword) {\n    throw new ForbiddenError('email or password incorrect')\n  }\n  if (!isAdmin && (user.deactivated || user.terminated)) {\n    throw new ForbiddenError('account inactive, contact support')\n  }\n\n  if (role === ROLES.PRO && !user.verified) {\n    throw new ForbiddenError('user not verified')\n  }\n\n  //TODO: remove device verification\n  if (!isAdmin) {\n    const device = user.devices.find(\n      (device) =>\n        device.value ===\n        (body as PostLoginProRequest | PostLoginUserRequest).deviceInfo,\n    )\n    if (!device) throw new ForbiddenError('device not recognised')\n  }\n\n  const otp = await generateLoginOtp()\n\n  await repo.user.updateUser(user.userId, {\n    otp: {\n      create: {\n        value: otp,\n        expiredAt: dayjs().add(10, 'm').toDate(),\n      },\n    },\n  })\n  if (body.otpType === OTP_TYPE.PHONE) {\n    phoneQueue.add({\n      phone: user.phone,\n      otp,\n    })\n  } else if (user.email && body.otpType === OTP_TYPE.EMAIL) {\n    emailQueue.add(\n      otpEmailTemplate({ name: user.name, email: user.email, otp }),\n    )\n  }\n\n  return {\n    user: PostLoginResponseSchema.parse(user),\n    otp,\n  }\n}\n\nconst signup = async ({\n  repo,\n  body,\n  role,\n}: {\n  repo: Repo\n  body: PostSignupProRequest | PostSignupUserRequest\n  role: Role\n}) => {\n  //TODO: verify faceId\n  if (!role) throw new ValidationError('Param role not passed')\n\n  if (role === ROLES.USER) {\n    PostSignupUserRequestSchema.parse({ ...body, role })\n  } else if (role === ROLES.PRO) {\n    PostSignupProRequestSchema.parse({ ...body, role })\n  } else {\n    PostSignupRequestSchema.parse({ ...body, role })\n  }\n\n  const _user = await repo.user.getUserByEmailandRole(body.email, role)\n  if (_user) throw new ValidationError('User with this email already exists')\n\n  const hashedPassword = hashPassword(body.password)\n\n  const { deviceInfo, ...newBody } = body //eslint-disable-line\n\n  const otp = await generateLoginOtp()\n\n  const user = await repo.user.createUser({\n    ...newBody,\n    role: role,\n    password: hashedPassword,\n    devices: {\n      create: {\n        value: body.deviceInfo,\n      },\n    },\n    otp: {\n      create: {\n        value: otp,\n        expiredAt: dayjs().add(10, 'm').toDate(),\n      },\n    },\n  })\n\n  emailQueue.add(signUpEmailTemplate(user.name))\n  // paymentThreshold.add(\n  //   { email: req.body.email },\n  //   {\n  //     attempts: 3,\n  //     backoff: {\n  //       type: 'exponential',\n  //       delay: 5000,\n  //     },\n  //     delay: 60 * 60 * 24 * 2 * 1000,\n  //     // repeat: {\n  //     //   cron: '',\n  //     //   startDate: new Date(),\n  //     // },\n  //     // timeout\n  //   },\n  // )\n\n  return { user: PostLoginResponseSchema.parse(user), otp }\n}\n\nconst validateOtp =\n  ({ repo }: { repo: Repo }) =>\n  async (body: PostValidateOtpReq) => {\n    PostValidateOtpReqSchema.parse(body)\n\n    const user = await repo.user.getUserByIdAndOtp(body.userId)\n\n    if (!user) throw new ForbiddenError()\n\n    if (!user.otp?.value) throw new ForbiddenError()\n    if (user.otp.value !== body.otp) throw new ForbiddenError()\n\n    if (dayjs(user?.otp?.expiredAt).isBefore(dayjs()))\n      throw new ForbiddenError()\n\n    await repo.user.updateUser(user.userId, {\n      otp: {\n        delete: true,\n      },\n    })\n\n    const token = generateJwt(\n      { email: user.email, role: user.role, userId: user.userId },\n      false,\n      {\n        expiresIn: String(dayjs.duration({ days: 7 }).as('ms')),\n      },\n    )\n\n    return { user: PostLoginResponseSchema.parse(user), token }\n  }\n\nconst uploadFaceId =\n  ({ repo }: { repo: Repo }) =>\n  async (userId: number, path?: string) => {\n    logger.info(path)\n    if (!path) throw new InternalError()\n    await repo.user.updateUser(userId, {\n      livePhotoUrl: path,\n    })\n\n    return { path }\n  }\n\nconst makeAuth = ({ repo }: { repo: Repo }) => {\n  return {\n    login: (body: PostLoginRequest, role: Role) => login({ repo, body, role }),\n    signup: (body: PostSignupProRequest | PostSignupUserRequest, role: Role) =>\n      signup({ repo, body, role }),\n    validateOtp: validateOtp({ repo }),\n    uploadFaceId: uploadFaceId({ repo }),\n  }\n}\n\nexport default makeAuth\n","import { z } from 'zod'\nimport { CursorSchema } from '../models/Cursor'\n\nexport const GetChatByIdReqSchema = z\n  .object({\n    userId: z.number().min(1),\n    otherUserId: z.number().min(1),\n  })\n  .strict()\n  .merge(CursorSchema)\n\nexport type GetChatByIdReq = z.infer<typeof GetChatByIdReqSchema>\n","import { z } from 'zod'\n\nexport const CursorSchema = z\n  .object({\n    cursor: z.number().optional(),\n    take: z.number().optional(),\n    desc: z.boolean().optional(),\n  })\n  .strict()\n\nexport type Cursor = z.infer<typeof CursorSchema>\n","import { Cursor } from '../../schemas/models/Cursor'\nimport { GetChatByIdReqSchema } from '../../schemas/request/getChatById'\nimport type { Repo } from '../../types'\n\nconst getChatList =\n  ({ repo }: { repo: Repo }) =>\n  async (userId: number) => {\n    const chats = await repo.chat.getChatList(userId)\n    return { chats }\n  }\n\nconst getChatById =\n  ({ repo }: { repo: Repo }) =>\n  async (data: { userId: number; otherUserId: number } & Cursor) => {\n    GetChatByIdReqSchema.parse(data)\n    const chats = await repo.chat.getChatById(data)\n    return { chats }\n  }\n\nconst makeChat = ({ repo }: { repo: Repo }) => {\n  return {\n    getChatList: getChatList({ repo }),\n    getChatById: getChatById({ repo }),\n  }\n}\n\nexport default makeChat\n","import { z } from 'zod'\n\nexport const PatchUserRequestSchema = z\n  .object({\n    userId: z.number(),\n    photoUrl: z.string().min(1),\n  })\n  .strict()\n\nexport type PatchUserRequest = z.infer<typeof PatchUserRequestSchema>\n\nexport const PatchUserUserRequestSchema = PatchUserRequestSchema.extend({})\nexport type PatchUserUserRequest = z.infer<typeof PatchUserUserRequestSchema>\n\nexport const PatchUserProRequestSchema = PatchUserRequestSchema.extend({\n  closingAt: z.date(),\n  resumptionAt: z.date(),\n})\nexport type PatchUserProRequest = z.infer<typeof PatchUserProRequestSchema>\n","import {\n  PatchUserRequest,\n  PatchUserRequestSchema,\n} from '../../schemas/request/patchUser'\nimport type { Repo } from '../../types'\n\nconst updateUser =\n  ({ repo }: { repo: Repo }) =>\n  async (userId: number, body: PatchUserRequest) => {\n    PatchUserRequestSchema.parse({ ...body, userId: userId })\n    await repo.user.updateUser(userId, body)\n  }\n\nconst makeUser = ({ repo }: { repo: Repo }) => {\n  return {\n    updateUser: updateUser({ repo }),\n  }\n}\n\nexport default makeUser\n","import type { Repo } from '../types'\nimport makeAuth from './Auth'\nimport makeChat from './Chat'\nimport makeUser from './User'\n\nconst makeServices = ({ repo }: { repo: Repo }) => {\n  return {\n    auth: makeAuth({ repo }),\n    user: makeUser({ repo }),\n    chat: makeChat({ repo }),\n  }\n}\n\nexport default makeServices\n","import { PrismaClient, User } from '@prisma/client'\nimport { Cursor } from '../schemas/models/Cursor'\n\nconst getChatList =\n  ({ db }: { db: PrismaClient }) =>\n  (userId: number) =>\n    db.$queryRaw<\n      {\n        name: User['name']\n        userId: User['userId']\n        photoUrl: User['photoUrl']\n      }[]\n    >`\n  SELECT userId,name,photoUrl FROM (SELECT DISTINCT \n    CASE \n    WHEN senderId = ${userId} THEN receiverId \n    WHEN receiverId = ${userId} THEN senderId\n    END as id\n  FROM Chat) temp\n  INNER JOIN User ON userId = id \n  WHERE id is not NULL`\n\nconst getChatById =\n  ({ db }: { db: PrismaClient }) =>\n  ({\n    userId,\n    otherUserId,\n    cursor,\n    take = 20,\n    desc = false,\n  }: {\n    userId: number\n    otherUserId: number\n  } & Cursor) =>\n    db.chat.findMany({\n      take: desc ? -take : take,\n      skip: 1,\n      cursor: cursor\n        ? {\n            chatId: cursor,\n          }\n        : undefined,\n      where: {\n        OR: [\n          {\n            senderId: userId,\n            receiverId: otherUserId,\n          },\n          {\n            senderId: otherUserId,\n            receiverId: userId,\n          },\n        ],\n      },\n      // orderBy: {\n      //   createdAt: 'desc',\n      // },\n    })\n\nconst makeChatRepo = ({ db }: { db: PrismaClient }) => {\n  return {\n    getChatList: getChatList({ db }),\n    getChatById: getChatById({ db }),\n  }\n}\n\nexport default makeChatRepo\n","import { Prisma, PrismaClient } from '@prisma/client'\nimport { Role } from '../types'\n\nconst getUserById =\n  ({ db }: { db: PrismaClient }) =>\n  (userId: number) => {\n    return db.user.findUnique({\n      where: {\n        userId,\n      },\n      include: {\n        devices: true,\n      },\n    })\n  }\n\nconst getUserByIdAndOtp =\n  ({ db }: { db: PrismaClient }) =>\n  (userId: number) => {\n    return db.user.findUnique({\n      where: {\n        userId,\n      },\n      include: {\n        otp: true,\n      },\n    })\n  }\n\nconst getUserByEmail = ({ email, db }: { db: PrismaClient; email: string }) => {\n  return db.user.findUnique({\n    where: {\n      email,\n    },\n    include: {\n      devices: true,\n    },\n  })\n}\n\nconst getUserByEmailandRole = async ({\n  email,\n  role,\n  db,\n}: {\n  db: PrismaClient\n  email: string\n  role: Role\n}) => {\n  const user = await db.user.findUnique({\n    where: {\n      email,\n    },\n  })\n\n  return user?.role === role ? user : null\n}\n\nconst createUser = ({\n  user,\n  db,\n}: {\n  db: PrismaClient\n  user: Prisma.UserCreateInput\n}) => db.user.create({ data: user })\n\nconst updateUser =\n  ({ db }: { db: PrismaClient }) =>\n  (userId: number, user: Prisma.UserUpdateInput) =>\n    db.user.update({\n      data: user,\n      where: {\n        userId: userId,\n      },\n    })\n\nconst makeUserRepo = ({ db }: { db: PrismaClient }) => {\n  return {\n    getUserById: getUserById({ db }),\n    getUserByIdAndOtp: getUserByIdAndOtp({ db }),\n    getUserByEmail: (email: string) => getUserByEmail({ db, email }),\n    getUserByEmailandRole: (email: string, role: Role) =>\n      getUserByEmailandRole({ db, email, role }),\n    createUser: (user: Prisma.UserCreateInput) => createUser({ user, db }),\n    updateUser: updateUser({ db }),\n  }\n}\n\nexport default makeUserRepo\n","import { PrismaClient } from '@prisma/client'\nimport makeChatRepo from './chat'\nimport makeUserRepo from './user'\n\nconst makeRepo = ({ db }: { db: PrismaClient }) => {\n  return {\n    user: makeUserRepo({ db }),\n    chat: makeChatRepo({ db }),\n  }\n}\n\nexport default makeRepo\n","import type { Router } from 'express'\nimport ah from 'express-async-handler'\nimport type { Role, Service } from '../../types'\n\n//TODO:\n\nconst makeAuthRouter = ({\n  router,\n  service,\n}: {\n  router: Router\n  service: Service\n}) => {\n  router.post(\n    '/login',\n    ah(async (req, res) => {\n      const data = await service.auth.login(req.body, req.query.role as Role)\n      res.status(200).send({ data })\n    }),\n  )\n\n  router.post(\n    '/signup',\n    ah(async (req, res) => {\n      const data = await service.auth.signup(req.body, req.query.role as Role)\n      res.status(200).send({ data })\n    }),\n  )\n\n  router.post(\n    '/validateotp',\n    ah(async (req, res) => {\n      const data = await service.auth.validateOtp(req.body)\n      res.status(200).send({ data })\n    }),\n  )\n\n  return router\n}\n\nexport default makeAuthRouter\n","import type { Router } from 'express'\nimport ah from 'express-async-handler'\nimport { BUCKET } from '../../config/constants'\nimport { upload } from '../../config/multer-cloud'\nimport type { Service } from '../../types'\nimport { patchUser } from './patchUser'\n\nconst makeUserRouter = ({\n  router,\n  service,\n}: {\n  router: Router\n  service: Service\n}) => {\n  router.patch('/', ah(patchUser({ service })))\n  router.post(\n    '/faceid',\n    upload({ fileName: 'photo', bucket: BUCKET.PHOTO }),\n    ah(async (req, res) => {\n      const data = await service.auth.uploadFaceId(\n        req.tokenData?.userId as number,\n        req.file?.path,\n      )\n      res.status(200).send({ data })\n    }),\n  )\n  return router\n}\n\nexport default makeUserRouter\n","import multer from 'multer'\nimport multerS3 from 'multer-s3'\nimport { S3, Endpoint } from 'aws-sdk'\nimport { BucketType } from '../types'\n\nconst spacesEndpoint = new Endpoint(process.env.STORAGE_ENDPOINT as string)\nconst s3 = new S3({\n  endpoint: spacesEndpoint,\n  accessKeyId: process.env.STORAGE_KEY,\n  secretAccessKey: process.env.STORAGE_SECRET,\n})\n\nconst oneMB = 1024 * 1024\n\nconst _upload = (bucket: BucketType) =>\n  multer({\n    storage: multerS3({\n      s3: s3 as any,\n      bucket: bucket,\n      metadata: function (req, file, cb) {\n        cb(null, { fieldName: file.fieldname })\n      },\n      acl: 'public-read',\n      key: function (req, file, cb) {\n        cb(null, `${req.tokenData?.userId}/${file.originalname}`)\n      },\n    }),\n    limits: {\n      fileSize: 10 * oneMB,\n    },\n  })\n\nexport const upload = ({\n  fileName,\n  bucket,\n}: {\n  fileName: string\n  bucket: BucketType\n}) => _upload(bucket).single(fileName)\n","import { Request, Response } from 'express'\nimport { Service } from '../../types'\n\nexport const patchUser =\n  ({ service }: { service: Service }) =>\n  async (req: Request, res: Response) => {\n    await service.user.updateUser(req.tokenData?.userId as number, req.body)\n    res.sendStatus(201)\n  }\n","import type { Router } from 'express'\nimport ah from 'express-async-handler'\nimport type { Service } from '../../types'\nimport { isNumericString, makeStringNumeric } from '../../utils'\n\n//TODO:\n\nconst makeChatRouter = ({\n  router,\n  service,\n}: {\n  router: Router\n  service: Service\n}) => {\n  router.get(\n    '/',\n    ah(async (req, res) => {\n      const data = await service.chat.getChatList(\n        req.tokenData?.userId as number,\n      )\n      res.send({ data })\n    }),\n  )\n  router.get(\n    '/:userid',\n    ah(async (req, res) => {\n      const data = await service.chat.getChatById({\n        userId: req.tokenData?.userId as number,\n        otherUserId: makeStringNumeric(req.params.userid) as number,\n        cursor: isNumericString(req.query.cursor)\n          ? (makeStringNumeric(req.query.cursor) as number)\n          : undefined,\n        desc: req.query.desc === 'true',\n        take: makeStringNumeric(req.query.take) as number,\n      })\n      res.send({ data })\n    }),\n  )\n\n  return router\n}\n\nexport default makeChatRouter\n","import type { Router } from 'express'\nimport ah from 'express-async-handler'\nimport type { Service } from '../types'\nimport crypto from 'crypto'\nimport { logger } from '../utils'\nimport { paymentQueue } from '../config/queue'\nimport { ForbiddenError } from '../utils/Error'\n\nconst makeRouter = ({\n  router,\n  service,\n}: {\n  router: Router\n  service: Service\n}) => {\n  router.get(\n    '/',\n    ah((req, res) => {\n      res.send('welcome to hairsap')\n    }),\n  )\n  router.get(\n    '/webhook/paystack',\n    ah((req, res) => {\n      const secret = process.env.PAYMENT_SECRET as string\n      const hash = crypto\n        .createHmac('sha512', secret)\n        .update(JSON.stringify(req.body))\n        .digest('hex')\n      if (hash !== req.headers['x-paystack-signature']) {\n        logger.info(req.body)\n        throw new ForbiddenError()\n      }\n      paymentQueue.add({\n        userId: null,\n        event: req.body.event,\n        reason: req.body.reason,\n        data: req.body.data,\n      })\n      res.sendStatus(200)\n    }),\n  )\n\n  return router\n}\n\nexport default makeRouter\n","import { z } from 'zod'\nimport { MESSAGE_TYPE, ROLES } from '../../config/constants'\nimport { chatQueue } from '../../config/queue'\nimport { IO } from '../../index'\nimport { Role } from '../../types'\nimport { logger } from '../../utils'\nimport { UnauthorizedError } from '../../utils/Error'\nimport { verifyJwt } from '../../utils/jwtLib'\n\n//client\n// const socket = io.connect('http://localhost:3000', {\n//   query: {token,role}\n// });\n\nconst users: Record<string, { socketId: string } | undefined> = {}\n\nconst MessageSchema = z\n  .object({\n    createdAt: z\n      .string()\n      .refine((str) =>\n        str.match(\n          new RegExp(\n            /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/,\n          ),\n        ),\n      ),\n    text: z.string().optional(),\n    photo: z.string().optional(),\n    senderId: z.number(),\n    receiverId: z.number(),\n    messageType: z.nativeEnum(MESSAGE_TYPE),\n  })\n  .strict()\n\nexport type ChatMessageType = z.infer<typeof MessageSchema>\n\nconst createChat = ({ io }: { io: IO }) => {\n  io.use(function (socket, next) {\n    if (socket.handshake.query?.token && socket.handshake.query?.role) {\n      try {\n        const tokenData = verifyJwt(\n          socket.handshake.query.token as string,\n          (socket.handshake.query?.role as Role) === ROLES.ADMIN,\n        )\n        ;(socket as any).decoded = tokenData\n        next()\n      } catch (error) {\n        next(new UnauthorizedError())\n      }\n    } else {\n      next(new UnauthorizedError())\n    }\n  })\n  io.on('connection', (socket) => {\n    logger.info('a user connected')\n\n    if (process.env.NODE_ENV === 'development') {\n      socket.onAny((event, ...args) => {\n        logger.info({ event, args })\n      })\n    }\n\n    socket.on('disconnect', () => {\n      users[(socket as any).decoded.userId] = undefined\n      logger.info('user disconnected')\n    })\n\n    socket.on('setup', (userId: number) => {\n      users[userId] = {\n        socketId: socket.id,\n      }\n    })\n\n    socket.on('new message', ({ message }: { message: ChatMessageType }) => {\n      const _message = MessageSchema.safeParse(message)\n      if (!_message.success) return\n      chatQueue.add(message)\n      const socketId = users[message.receiverId]?.socketId\n      if (socketId) {\n        socket\n          .to(users[message.receiverId]?.socketId as string)\n          .emit('new message', message)\n      } else {\n        // TODO: send FCM\n      }\n    })\n  })\n}\n\nexport default createChat\n"],"mappings":"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","names":["err","jwt","ah","nodemailer","Queue","import_zod","import_zod","import_zod","import_zod","import_crypto","crypto","err","dayjs","duration","device","import_zod","import_zod","import_zod","getChatList","getChatById","updateUser","import_express_async_handler","ah","auth_default","import_express_async_handler","import_multer","multer","multerS3","ah","user_default","import_express_async_handler","ah","chat_default","import_express_async_handler","import_crypto","ah","crypto","app","express","compression","helmet","cors","swaggerUi","auth_default","user_default","chat_default","import_zod","io","import_socket","http"]}