generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Subscription {
  pros   User @relation("pro", fields: [proId], references: [userId])
  proId  Int
  users  User @relation("user", fields: [userId], references: [userId])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, proId])
  @@unique([userId, proId])
}

model ProService {
  service   Service @relation(fields: [serviceId], references: [serviceId])
  serviceId Int
  pro       User    @relation(fields: [proId], references: [userId])
  proId     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([proId, serviceId])
}

model Service {
  serviceId   Int          @id @default(autoincrement())
  name        String
  photoUrl    String
  subServices SubService[]
  proServices ProService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SubService {
  subServiceId      Int                 @id @default(autoincrement())
  name              String
  photoUrl          String
  price             Int
  serviceId         Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  service           Service             @relation(fields: [serviceId], references: [serviceId])
  bookedSubServices BookingSubService[]

  @@index([serviceId])
}

model BookingSubService {
  bookingId    Int
  subServiceId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  booking      Booking    @relation(fields: [bookingId], references: [bookingId])
  subService   SubService @relation(fields: [subServiceId], references: [subServiceId])

  @@id([bookingId, subServiceId])
  @@index([subServiceId])
}

model InvoiceFees {
  feeId     Int     @id @default(autoincrement())
  name      String
  price     Int
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [invoiceId])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([invoiceId])
}

model Invoice {
  invoiceId    Int           @id @default(autoincrement())
  transportFee Int
  distance     Float
  bookingId    Int           @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  booking      Booking       @relation(fields: [bookingId], references: [bookingId])
  invoiceFees  InvoiceFees[]
  paid         Boolean       @default(false)
  amountPaid   Int?
  reference    String?
  channel      String?
}

model Review {
  reviewId Int    @id @default(autoincrement())
  value    String @db.Text
  pro      User   @relation("pro", fields: [proId], references: [userId])
  proId    Int
  user     User   @relation("user", fields: [userId], references: [userId])
  userId   Int
}

model Otp {
  otpId  String @id @default(uuid())
  value  String
  user   User   @relation(fields: [userId], references: [userId])
  userId Int    @unique

  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
}

model Booking {
  bookingId                   Int       @id @default(autoincrement())
  userCompleted               Boolean   @default(false)
  proCompleted                Boolean   @default(false)
  arrived                     Boolean   @default(false)
  address                     String
  samplePhotoUrl              String?
  samplePhotoKey              String?
  samplePhotoOriginalFileName String?
  status                      String
  rating                      Int?
  acceptedAt                  DateTime?
  rejectedAt                  DateTime?
  arrivalAt                   DateTime?
  cancelledAt                 DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @default(now()) @updatedAt
  pro                         User?     @relation("pro", fields: [proId], references: [userId])
  proId                       Int
  user                        User?     @relation("user", fields: [userId], references: [userId])
  userId                      Int

  invoice           Invoice?
  bookedSubServices BookingSubService[]

  @@index([proId])
  @@index([userId])
}

model Chat {
  chatId      Int     @id @default(autoincrement())
  messageType String
  message     String?
  text        String?
  photo       String?

  senderId   Int
  receiverId Int
  receiver   User @relation("receiver", fields: [receiverId], references: [userId])
  sender     User @relation("sender", fields: [senderId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([senderId])
  @@index([receiverId])
}

model Card {
  cardId            Int     @id @default(autoincrement())
  authorization     Json?
  authorizationCode String?
  email             String
  bank              String?
  last4             String?
  brand             String?
  user              User    @relation(fields: [userId], references: [userId])
  userId            Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  userId                       Int      @id @default(autoincrement())
  email                        String   @db.VarChar(255)
  address                      String
  name                         String
  password                     String
  phone                        String
  role                         String
  faceIdPhotoKey               String?
  faceIdPhotoOriginalFileName  String?
  profilePhotoUrl              String?
  profilePhotoKey              String?
  profilePhotoOriginalFileName String?
  longitude                    Decimal? @db.Decimal(10, 6)
  latitude                     Decimal? @db.Decimal(10, 6)
  deactivated                  Boolean? @default(false)
  deactivatedReason            Int?
  deactivationCount            Int      @default(0)
  reactivationCount            Int      @default(0)
  reactivationRequested        Boolean? @default(false)
  terminated                   Boolean? @default(false)
  // approved              Boolean?        @default(false)
  verified                     Boolean? @default(false) //verify new pro account
  available                    Boolean? @default(true)
  workVideoUrl                 String?
  businessName                 String?

  otp            Otp?
  notifications  Notification[]
  PasswordReset  PasswordReset[]
  paymentEvents  PaymentEvents[]
  proReviews     Review[]        @relation("pro")
  userReviews    Review[]        @relation("user")
  receivedChats  Chat[]          @relation("receiver")
  sentChats      Chat[]          @relation("sender")
  bonuses        Bonus[]
  redeemPayments RedeemPayment[]
  subscribers    Subscription[]  @relation("pro")
  proServices    ProService[]
  Subscription   Subscription[]  @relation("user")
  proBookings    Booking[]       @relation("pro")
  userBookings   Booking[]       @relation("user")
  account        Account?
  card           Card?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email, phone, role])
  @@unique([email, role])
  @@unique([phone, role])
  @@index([email])
  @@index([latitude, longitude])
}

model PaymentEvents {
  eventId Int     @id @default(autoincrement())
  event   String?
  data    Json
  reason  String?
  User    User?   @relation(fields: [userId], references: [userId])
  userId  Int?
  email   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([email])
}

model PasswordReset {
  resetId String @id @default(uuid())
  token   String
  userId  Int
  user    User   @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())

  @@unique([userId, token])
  @@index([userId])
}

model Notification {
  notificationId Int    @id @default(autoincrement())
  message        String
  user           User   @relation(fields: [userId], references: [userId])
  userId         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model RedeemPayment {
  redeemId  Int     @id @default(autoincrement())
  confirmed Boolean
  amount    Int
  user      User    @relation(fields: [userId], references: [userId])
  userId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model Bonus {
  bonusId   Int      @id @default(autoincrement())
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [userId])
  userId    Int

  @@index([userId])
}

model Account {
  accountId     Int    @id @default(autoincrement())
  accountNumber String
  accountName   String
  bankName      String
  user          User   @relation(fields: [userId], references: [userId])
  userId        Int    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}
