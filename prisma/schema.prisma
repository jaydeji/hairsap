generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// track when pro sets availability
model Available {
  availableId Int      @id @default(autoincrement())
  available   Boolean
  pro         User     @relation(fields: [proId], references: [userId], onDelete: Cascade)
  proId       Int
  createdAt   DateTime @default(now()) @updatedAt
}

model Subscription {
  pro    User @relation("pro_sub", fields: [proId], references: [userId], onDelete: Cascade)
  proId  Int
  user   User @relation("user_sub", fields: [userId], references: [userId], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, proId])
  @@unique([userId, proId])
}

model ProService {
  service   Service @relation(fields: [serviceId], references: [serviceId])
  serviceId Int
  pro       User    @relation(fields: [proId], references: [userId], onDelete: Cascade)
  proId     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([proId, serviceId])
}

model Service {
  serviceId   Int          @id @default(autoincrement())
  name        String
  photoUrl    String       @db.VarChar(512)
  subServices SubService[]
  proServices ProService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SubService {
  subServiceId      Int                 @id @default(autoincrement())
  name              String
  info              String?             @db.VarChar(512)
  photoUrl          String              @db.VarChar(512)
  price             Float
  serviceId         Int
  order             Float
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  service           Service             @relation(fields: [serviceId], references: [serviceId])
  bookedSubServices BookingSubService[]

  @@index([serviceId])
}

model BookingSubService {
  bookingId    Int
  subServiceId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  booking      Booking    @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
  subService   SubService @relation(fields: [subServiceId], references: [subServiceId])

  @@id([bookingId, subServiceId])
  @@index([subServiceId])
}

model InvoiceFees {
  feeId        Int     @id @default(autoincrement())
  name         String
  price        Float
  invoiceId    Int
  invoice      Invoice @relation(fields: [invoiceId], references: [invoiceId], onDelete: Cascade)
  subServiceId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([invoiceId])
}

model Invoice {
  invoiceId    Int           @id @default(autoincrement())
  transportFee Float
  distance     Float
  booking      Booking       @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
  bookingId    Int           @unique
  promo        Promo?        @relation(fields: [promoId], references: [promoId])
  promoId      Int?
  promoUsed    Boolean?      @default(false)
  promoAmount  Float?
  invoiceFees  InvoiceFees[]
  paid         Boolean       @default(false)
  amountPaid   Float?
  reference    String?
  channel      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Otp {
  otpId  String @id @default(uuid())
  value  String
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId Int    @unique

  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
}

model Booking {
  bookingId                   Int       @id @default(autoincrement())
  arrived                     Boolean   @default(false)
  inTransit                   Boolean   @default(false)
  address                     String    @db.Text()
  samplePhotoUrl              String?   @db.VarChar(512)
  samplePhotoKey              String?
  samplePhotoOriginalFileName String?
  status                      String
  pinStatus                   String?
  pinAmount                   Int       @default(0)
  pinDate                     DateTime?
  pinRedisUserKey             String?
  pinRedisProKey              String?
  rating                      Int?
  review                      String?   @db.Text()
  auto                        Boolean?
  acceptedAt                  DateTime?
  completedAt                 DateTime?
  rejectedAt                  DateTime?
  arrivalAt                   DateTime?
  cancelledAt                 DateTime?
  pro                         User      @relation("pro_booking", fields: [proId], references: [userId], onDelete: Cascade)
  proId                       Int
  user                        User      @relation("user_booking", fields: [userId], references: [userId], onDelete: Cascade)
  userId                      Int

  invoice           Invoice?
  bookedSubServices BookingSubService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([proId])
  @@index([userId])
}

model Chat {
  chatId      Int     @id @default(autoincrement())
  messageType String
  message     String? @db.Text()
  photoUrl    String? @db.VarChar(512)

  senderId   Int
  receiverId Int
  receiver   User @relation("message_receiver", fields: [receiverId], references: [userId], onDelete: Cascade)
  sender     User @relation("message_sender", fields: [senderId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([senderId])
  @@index([receiverId])
}

model Card {
  cardId            Int    @id @default(autoincrement())
  authorization     Json
  authorizationCode String
  email             String
  bank              String
  last4             String
  brand             String
  expiryYear        String
  expiryMonth       String
  user              User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId            Int    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Deactivation {
  deactivationId Int      @id @default(autoincrement())
  reason         String
  amount         Float
  paid           Boolean? @default(false)
  user           User     @relation(fields: [proId], references: [userId], onDelete: Cascade)
  proId          Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model DeactivatedUser {
  deactivatedUserId Int  @id @default(autoincrement())
  data              Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  userId                           Int      @id @default(autoincrement())
  email                            String
  address                          String?  @db.Text()
  name                             String
  password                         String
  phone                            String
  role                             String
  faceIdPhotoKey                   String?
  faceIdPhotoUrl                   String?
  faceIdPhotoOriginalFileName      String?
  profilePhotoUrl                  String?  @db.VarChar(512)
  profilePhotoKey                  String?
  profilePhotoOriginalFileName     String?
  tempProfilePhotoUrl              String?  @db.VarChar(512)
  tempProfilePhotoKey              String?
  tempProfilePhotoOriginalFileName String?
  longitude                        Decimal? @db.Decimal(10, 6)
  latitude                         Decimal? @db.Decimal(10, 6)
  deactivated                      Boolean? @default(false)
  deactivationCount                Int      @default(0)
  reactivationCount                Int      @default(0)
  reactivationRequested            Boolean? @default(false)
  terminated                       Boolean? @default(false)
  approved                         Boolean? @default(false)
  verified                         Boolean? @default(false) //verify new pro account
  available                        Boolean? @default(true)
  workVideoUrl                     String?  @db.VarChar(512)
  workVideoKey                     String?
  workVideoOriginalFileName        String?
  businessName                     String?
  pushToken                        String?
  bio                              String?  @db.Text()
  systemUpdPass                    Boolean? @default(false)

  otp                  Otp?
  notifications        Notification[]
  PasswordReset        PasswordReset[]
  paymentEvents        PaymentEvents[]
  receivedChats        Chat[]                @relation("message_receiver")
  sentChats            Chat[]                @relation("message_sender")
  bonuses              Bonus[]
  // redeemPayments      RedeemPayment[]
  proServices          ProService[]
  subscribers          Subscription[]        @relation("pro_sub")
  subscriptions        Subscription[]        @relation("user_sub")
  proBookings          Booking[]             @relation("pro_booking")
  userBookings         Booking[]             @relation("user_booking")
  notificationTrackers NotificationTracker[]
  deactivations        Deactivation[]
  availableTimes       Available[]
  account              Account?
  card                 Card?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email, phone, role])
  @@unique([email, role])
  @@unique([phone, role])
  @@index([email])
  @@index([latitude, longitude])
}

model PaymentEvents {
  eventId Int     @id @default(autoincrement())
  event   String?
  data    Json
  reason  String?
  User    User?   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId  Int?
  email   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([email])
}

model PasswordReset {
  resetId String @id @default(uuid())
  token   String
  userId  Int
  user    User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())

  @@unique([userId, token])
  @@index([userId])
}

model NotificationTracker {
  notificationTrackerId Int    @id @default(autoincrement())
  user                  User?  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId                Int?
  type                  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Notification {
  notificationId Int      @id @default(autoincrement())
  body           String?  @db.Text()
  title          String?
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId         Int
  read           Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

// model RedeemPayment {
//   redeemId  Int     @id @default(autoincrement())
//   confirmed Boolean
//   invoiceId

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   @@index([userId])
// }

model Bonus {
  bonusId   Int      @id @default(autoincrement())
  amount    Float
  paid      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  pro       User     @relation(fields: [proId], references: [userId], onDelete: Cascade)
  proId     Int

  @@index([proId])
}

model Account {
  accountId     Int    @id @default(autoincrement())
  accountNumber String
  accountName   String
  bankName      String
  user          User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        Int    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model Marketer {
  marketerId Int     @id @default(autoincrement())
  name       String
  Promo      Promo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Promo {
  promoId    Int      @id @default(autoincrement())
  active     Boolean
  code       String   @unique
  Marketer   Marketer @relation(fields: [marketerId], references: [marketerId], onDelete: Cascade)
  marketerId Int
  discount   Discount @relation(fields: [discountId], references: [discountId], onDelete: Cascade)
  discountId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Invoice   Invoice[]

  @@index([code])
}

model Discount {
  discountId Int    @id @default(autoincrement())
  name       String

  promos Promo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
