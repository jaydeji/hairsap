generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Subscription {
  userId    Int
  proId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  pro       User     @relation("pro", fields: [proId], references: [userId], map: "Subscription_proId_fkey")
  user      User     @relation("user", fields: [userId], references: [userId], map: "Subscription_userId_fkey")

  @@id([userId, proId])
  @@unique([userId, proId])
  @@index([proId], map: "Subscription_proId_fkey")
}

model UserService {
  userId    Int
  serviceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  service   Service  @relation(fields: [serviceId], references: [serviceId])
  user      User     @relation(fields: [userId], references: [userId])

  @@id([userId, serviceId])
  @@index([serviceId], map: "UserService_serviceId_fkey")
}

model Service {
  serviceId   Int           @id @default(autoincrement())
  name        String
  photoUrl    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  subServices SubService[]
  User        UserService[]
}

model SubService {
  subServiceId      Int                 @id @default(autoincrement())
  name              String
  photoUrl          String
  price             Int
  service           Service             @relation(fields: [serviceId], references: [serviceId])
  serviceId         Int
  bookedSubServices BookingSubService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([serviceId], map: "SubService_serviceId_fkey")
}

model BookingSubService {
  bookingId    Int
  subServiceId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  booking      Booking    @relation(fields: [bookingId], references: [bookingId])
  subService   SubService @relation(fields: [subServiceId], references: [subServiceId])

  @@id([bookingId, subServiceId])
  @@index([subServiceId], map: "BookingSubService_subServiceId_fkey")
}

model InvoiceFees {
  feeId Int    @id @default(autoincrement())
  name  String
  price Int

  Invoice   Invoice @relation(fields: [invoiceId], references: [invoiceId])
  invoiceId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Invoice {
  invoiceId    Int           @id @default(autoincrement())
  transportFee Int
  invoiceFees  InvoiceFees[]
  distance     Int
  booking      Booking       @relation(fields: [bookingId], references: [bookingId])
  bookingId    Int           @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

model Booking {
  bookingId         Int                 @id @default(autoincrement())
  cancelled         Boolean             @default(false)
  userCompleted     Boolean             @default(false)
  proCompleted      Boolean             @default(false)
  address           String
  samplePhotoUrl    String?
  status            String
  rating            Int?
  pro               User                @relation("pro", fields: [proId], references: [userId])
  proId             Int
  user              User                @relation("user", fields: [userId], references: [userId])
  userId            Int
  invoice           Invoice?
  invoiceId         Int?
  bookedSubServices BookingSubService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([proId])
  @@index([userId])
}

model Chat {
  chatId Int @id @default(autoincrement())

  message     String
  messageType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  receiver    User     @relation("receiver", fields: [receiverId], references: [userId])
  sender      User     @relation("sender", fields: [senderId], references: [userId])
  senderId    Int
  receiverId  Int

  @@index([receiverId], map: "Chat_receiverId_fkey")
  @@index([senderId], map: "Chat_senderId_fkey")
}

model User {
  userId            Int       @id @default(autoincrement())
  email             String?   @unique @db.VarChar(255)
  address           String?
  name              String
  userName          String?
  password          String
  role              String
  phone             String
  photoUrl          String?
  livePhotoUrl      String?
  approved          Boolean?  @default(false)
  deactivated       Boolean?  @default(false)
  deactivatedReason Int?
  deactivationCount Int?
  reactivationCount Int?
  terminated        Boolean?  @default(false)
  verified          Boolean?  @default(false)
  longitude         Decimal?  @db.Decimal(10, 6)
  latitude          Decimal?  @db.Decimal(10, 6)
  resumptionAt      DateTime?
  closingAt         DateTime?
  workVideoUrl      String?
  businessName      String?

  bonuses          Bonus[]
  devices          Device[]
  notifications    Notification[]
  otp              Otp?
  PasswordReset    PasswordReset[]
  paymentEvents    PaymentEvents[]
  redeemPayments   RedeemPayment[]
  proBookings      Booking[]       @relation("pro")
  userBookings     Booking[]       @relation("user")
  receivedMessages Chat[]          @relation("receiver")
  sentMessages     Chat[]          @relation("sender")
  subscribedTos    Subscription[]  @relation("pro")
  subscribers      Subscription[]  @relation("user")
  services         UserService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([email])
  @@index([latitude, longitude])
}

model PaymentEvents {
  eventId   Int      @id @default(autoincrement())
  event     String
  data      Json
  reason    String
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User?    @relation(fields: [userId], references: [userId])

  @@index([userId], map: "PaymentEvents_userId_fkey")
}

model Device {
  deviceId  Int      @id @default(autoincrement())
  value     String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "Device_userId_fkey")
}

model PasswordReset {
  resetId   String   @id @default(uuid())
  userId    Int
  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "PasswordReset_userId_fkey")
}

model Otp {
  otpId     String   @id @default(uuid())
  userId    Int      @unique
  value     String
  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])
}

model Notification {
  notificationId Int      @id @default(autoincrement())
  userId         Int
  message        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  user           User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "Notification_userId_fkey")
}

model RedeemPayment {
  redeemId  Int      @id @default(autoincrement())
  userId    Int
  confirmed Boolean
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "RedeemPayment_userId_fkey")
}

model Bonus {
  bonusId   Int      @id @default(autoincrement())
  userId    Int
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "Bonus_userId_fkey")
}
