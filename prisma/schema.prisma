// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Subscription {
  user   User @relation("user", fields: [userId], references: [userId])
  userId Int
  pro    User @relation("pro", fields: [proId], references: [userId])
  proId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, proId])
  @@unique([userId, proId])
}

model UserService {
  user      User    @relation(fields: [userId], references: [userId])
  userId    Int
  service   Service @relation(fields: [serviceId], references: [serviceId])
  serviceId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, serviceId])
}

model Service {
  serviceId   Int           @id @default(autoincrement())
  name        String
  photoUrl    String
  User        UserService[]
  subServices SubService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SubService {
  subServiceId      Int                 @id @default(autoincrement())
  name              String
  photoUrl          String
  service           Service             @relation(fields: [serviceId], references: [serviceId])
  serviceId         Int
  bookedSubServices BookingSubService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BookingSubService {
  booking      Booking    @relation(fields: [bookingId], references: [bookingId])
  bookingId    Int
  subService   SubService @relation(fields: [subServiceId], references: [subServiceId])
  subServiceId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([bookingId, subServiceId])
}

model Invoice {
  invoiceId     Int     @id @default(autoincrement())
  booking       Booking @relation(fields: [bookingId], references: [bookingId])
  bookingId     Int     @unique
  transportFee  Int
  subServiceFee Int
  distance      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Booking {
  bookingId         Int                 @id @default(autoincrement())
  user              User                @relation("user", fields: [userId], references: [userId])
  userId            Int
  pro               User                @relation("pro", fields: [proId], references: [userId])
  proId             Int
  cancelled         Boolean             @default(false)
  userCompleted     Boolean             @default(false)
  proCompleted      Boolean             @default(false)
  bookedSubServices BookingSubService[]
  location          String
  locationPhotoUrl  String
  status            String
  invoiceId         Invoice?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Chat {
  chatId      Int    @id @default(autoincrement())
  sender      User   @relation("sender", fields: [senderId], references: [userId])
  senderId    Int
  receiver    User   @relation("receiver", fields: [receiverId], references: [userId])
  receiverId  Int
  messageType String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  userId            Int             @id @default(autoincrement())
  email             String?         @unique @db.VarChar(255)
  address           String?
  name              String
  userName          String?
  password          String
  role              String
  phone             String
  photoUrl          String?
  livePhotoUrl      String?
  approved          Boolean?        @default(false)
  deactivated       Boolean?        @default(false)
  deactivatedReason Int?
  deactivationCount Int?
  reactivationCount Int?
  terminated        Boolean?        @default(false)
  verified          Boolean?        @default(false)
  longitude         Decimal?        @db.Decimal(10, 6)
  latitude          Decimal?        @db.Decimal(10, 6)
  resumptionAt      DateTime?
  closingAt         DateTime?
  workVideoUrl      String?
  businessName      String?
  otp               Otp?
  devices           Device[]
  services          UserService[]
  subscribers       Subscription[]  @relation("user")
  subscribedTos     Subscription[]  @relation("pro")
  userBookings      Booking[]       @relation("user")
  proBookings       Booking[]       @relation("pro")
  sentMessages      Chat[]          @relation("sender")
  receivedMessages  Chat[]          @relation("receiver")
  bonuses           Bonus[]
  notifications     Notification[]
  redeemPayments    RedeemPayment[]
  PasswordReset     PasswordReset[]
  paymentEvents     PaymentEvents[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([email])
}

model PaymentEvents {
  eventId Int    @id @default(autoincrement())
  event   String
  data    Json
  reason  String
  User    User?  @relation(fields: [userId], references: [userId])
  userId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Device {
  deviceId Int    @id @default(autoincrement())
  value    String
  User     User   @relation(fields: [userId], references: [userId])
  userId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PasswordReset {
  resetId String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [userId])
  userId  Int

  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
}

model Otp {
  otpId  String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [userId])
  userId Int    @unique
  value  String

  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
}

model Notification {
  notificationId Int    @id @default(autoincrement())
  user           User   @relation(fields: [userId], references: [userId])
  userId         Int
  message        String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model RedeemPayment {
  redeemId  Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [userId])
  userId    Int
  confirmed Boolean
  amount    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Bonus {
  bonusId Int  @id @default(autoincrement())
  user    User @relation(fields: [userId], references: [userId])
  userId  Int
  amount  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// model Sample {
//     largeNum    BigInt
//     blob        Bytes
//     uns         Unsupported("circle") @default(dbgenerated("'<(10,4),11>'::circle"))
// }
