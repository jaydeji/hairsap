generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Subscription {
  userId    Int
  proId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  pro       User     @relation("pro", fields: [proId], references: [userId], map: "Subscription_proId_fkey")
  user      User     @relation("user", fields: [userId], references: [userId], map: "Subscription_userId_fkey")

  @@id([userId, proId])
  @@unique([userId, proId])
  @@index([proId], map: "Subscription_proId_fkey")
}

model UserService {
  userId    Int
  serviceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  service   Service  @relation(fields: [serviceId], references: [serviceId])
  user      User     @relation(fields: [userId], references: [userId])

  @@id([userId, serviceId])
  @@index([serviceId], map: "UserService_serviceId_fkey")
}

model Service {
  serviceId   Int           @id @default(autoincrement())
  name        String
  photoUrl    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  subServices SubService[]
  User        UserService[]
}

model SubService {
  subServiceId      Int                 @id @default(autoincrement())
  name              String
  photoUrl          String
  serviceId         Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  service           Service             @relation(fields: [serviceId], references: [serviceId])
  bookedSubServices BookingSubService[]

  @@index([serviceId], map: "SubService_serviceId_fkey")
}

model BookingSubService {
  bookingId    Int
  subServiceId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  booking      Booking    @relation(fields: [bookingId], references: [bookingId])
  subService   SubService @relation(fields: [subServiceId], references: [subServiceId])

  @@id([bookingId, subServiceId])
  @@index([subServiceId], map: "BookingSubService_subServiceId_fkey")
}

model Invoice {
  invoiceId     Int      @id @default(autoincrement())
  bookingId     Int      @unique
  transportFee  Int
  subServiceFee Int
  distance      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  booking       Booking  @relation(fields: [bookingId], references: [bookingId])
}

model Booking {
  bookingId                 Int                 @id @default(autoincrement())
  userId                    Int
  proId                     Int
  cancelled                 Boolean             @default(false)
  userCompleted             Boolean             @default(false)
  proCompleted              Boolean             @default(false)
  location                  String
  locationPhotoUrl          String
  status                    String
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @default(now()) @updatedAt
  User_Booking_proIdToUser  User                @relation("pro", fields: [proId], references: [userId])
  User_Booking_userIdToUser User                @relation("user", fields: [userId], references: [userId])
  bookedSubServices         BookingSubService[]
  invoiceId                 Invoice?

  @@index([proId], map: "Booking_proId_fkey")
  @@index([userId], map: "Booking_userId_fkey")
}

model Chat {
  chatId      Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  message     String
  messageType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  receiver    User     @relation("receiver", fields: [receiverId], references: [userId])
  sender      User     @relation("sender", fields: [senderId], references: [userId])

  @@index([receiverId], map: "Chat_receiverId_fkey")
  @@index([senderId], map: "Chat_senderId_fkey")
}

model User {
  userId            Int                   @id @default(autoincrement())
  email             String?               @unique @db.VarChar(255)
  address           String?
  name              String
  userName          String?
  password          String
  role              String
  phone             String
  photoUrl          String?
  livePhotoUrl      String?
  approved          Boolean?              @default(false)
  deactivated       Boolean?              @default(false)
  deactivatedReason Int?
  deactivationCount Int?
  reactivationCount Int?
  terminated        Boolean?              @default(false)
  verified          Boolean?              @default(false)
  longitude         Unsupported("POINT")?
  latitude          Unsupported("POINT")?
  resumptionAt      DateTime?
  closingAt         DateTime?
  workVideoUrl      String?
  businessName      String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @default(now()) @updatedAt
  bonuses           Bonus[]
  proBookings       Booking[]             @relation("pro")
  userBookings      Booking[]             @relation("user")
  receivedMessages  Chat[]                @relation("receiver")
  sentMessages      Chat[]                @relation("sender")
  devices           Device[]
  notifications     Notification[]
  otp               Otp?
  PasswordReset     PasswordReset[]
  paymentEvents     PaymentEvents[]
  redeemPayments    RedeemPayment[]
  subscribedTos     Subscription[]        @relation("pro")
  subscribers       Subscription[]        @relation("user")
  services          UserService[]

  @@index([email])
}

model PaymentEvents {
  eventId   Int      @id @default(autoincrement())
  event     String
  data      Json
  reason    String
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User?    @relation(fields: [userId], references: [userId])

  @@index([userId], map: "PaymentEvents_userId_fkey")
}

model Device {
  deviceId  Int      @id @default(autoincrement())
  value     String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "Device_userId_fkey")
}

model PasswordReset {
  resetId   String   @id @default(uuid())
  userId    Int
  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "PasswordReset_userId_fkey")
}

model Otp {
  otpId     String   @id @default(uuid())
  userId    Int      @unique
  value     String
  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])
}

model Notification {
  notificationId Int      @id @default(autoincrement())
  userId         Int
  message        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  user           User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "Notification_userId_fkey")
}

model RedeemPayment {
  redeemId  Int      @id @default(autoincrement())
  userId    Int
  confirmed Boolean
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "RedeemPayment_userId_fkey")
}

model Bonus {
  bonusId   Int      @id @default(autoincrement())
  userId    Int
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "Bonus_userId_fkey")
}
